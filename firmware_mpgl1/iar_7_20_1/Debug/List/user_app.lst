###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        16/Jun/2016  13:30:54
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\DK\Desktop\Razor_Atmel-master\Razor_Atmel-master\firmware_mpg_common\application\user_app.c
#    Command line =  
#        C:\Users\DK\Desktop\Razor_Atmel-master\Razor_Atmel-master\firmware_mpg_common\application\user_app.c
#        -D MPGL1 -D MPG1 --preprocess=cl
#        C:\Users\DK\Desktop\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -lC
#        C:\Users\DK\Desktop\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -o
#        C:\Users\DK\Desktop\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\EIE课程设计-单片机\软件安装\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\DK\Desktop\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\
#        -I
#        C:\Users\DK\Desktop\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\bsp\
#        -I
#        C:\Users\DK\Desktop\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\drivers\
#        -I
#        C:\Users\DK\Desktop\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\application\
#        -I
#        C:\Users\DK\Desktop\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\
#        -I
#        C:\Users\DK\Desktop\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\application\
#        -I
#        C:\Users\DK\Desktop\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\cmsis\
#        -I
#        C:\Users\DK\Desktop\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\drivers\
#        -On --use_c++_inline -I
#        D:\EIE课程设计-单片机\软件安装\arm\CMSIS\Include\
#    List file    =  
#        C:\Users\DK\Desktop\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\Debug\List\user_app.lst
#    Object file  =  
#        C:\Users\DK\Desktop\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\Debug\Obj\user_app.o
#
###############################################################################

C:\Users\DK\Desktop\Razor_Atmel-master\Razor_Atmel-master\firmware_mpg_common\application\user_app.c
      1          /**********************************************************************************************************************
      2          File: user_app.c                                                                
      3          
      4          ----------------------------------------------------------------------------------------------------------------------
      5          To start a new task using this user_app as a template:
      6           1. Copy both user_app.c and user_app.h to the Application directory
      7           2. Rename the files yournewtaskname.c and yournewtaskname.h
      8           3. Add yournewtaskname.c and yournewtaskname.h to the Application Include and Source groups in the IAR project
      9           4. Use ctrl-h (make sure "Match Case" is checked) to find and replace all instances of "user_app" with "yournewtaskname"
     10           5. Use ctrl-h to find and replace all instances of "UserApp" with "YourNewTaskName"
     11           6. Use ctrl-h to find and replace all instances of "USER_APP" with "YOUR_NEW_TASK_NAME"
     12           7. Add a call to YourNewTaskNameInitialize() in the init section of main
     13           8. Add a call to YourNewTaskNameRunActiveState() in the Super Loop section of main
     14           9. Update yournewtaskname.h per the instructions at the top of yournewtaskname.h
     15          10. Delete this text (between the dashed lines) and update the Description below to describe your task
     16          ----------------------------------------------------------------------------------------------------------------------
     17          
     18          Description:
     19          This is a user_app.c file template 
     20          
     21          ------------------------------------------------------------------------------------------------------------------------
     22          API:
     23          
     24          Public functions:
     25          
     26          
     27          Protected System functions:
     28          void UserAppInitialize(void)
     29          Runs required initialzation for the task.  Should only be called once in main init section.
     30          
     31          void UserAppRunActiveState(void)
     32          Runs current task state.  Should only be called once in main loop.
     33          
     34          
     35          **********************************************************************************************************************/
     36          
     37          #include "configuration.h"

  /**********************************************************************************************************************
                                                                                                                        ^
"C:\Users\DK\Desktop\Razor_Atmel-master\Razor_Atmel-master\firmware_mpg_common\configuration.h",1  Warning[Pa050]: 
          non-native end of line sequence detected (this diagnostic is only
          issued once)
     38          
     39          /***********************************************************************************************************************
     40          Global variable definitions with scope across entire project.
     41          All Global variable names shall start with "G_"
     42          ***********************************************************************************************************************/
     43          /* New variables */

   \                                 In section .bss, align 4
     44          volatile u32 G_u32UserAppFlags;                       /* Global state flags */
   \                     G_u32UserAppFlags:
   \   00000000                      DS8 4
     45          
     46          
     47          /*--------------------------------------------------------------------------------------------------------------------*/
     48          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     49          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     50          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     51          
     52          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     53          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     54          
     55          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     56          extern AntSetupDataType G_stAntSetupData;                         /* From ant.c */
     57          
     58          extern u32 G_u32AntApiCurrentDataTimeStamp;                       /* From ant_api.c */
     59          extern AntApplicationMessageType G_eAntApiCurrentMessageClass;    /* From ant_api.c */
     60          extern u8 G_au8AntApiCurrentData[ANT_APPLICATION_MESSAGE_BYTES];  /* From ant_api.c */
     61          
     62          /***********************************************************************************************************************
     63          Global variable definitions with scope limited to this local application.
     64          Variable names shall start with "UserApp_" and be declared as static.
     65          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     66          static fnCode_type UserApp_StateMachine;            /* The state machine function pointer */
   \                     UserApp_StateMachine:
   \   00000000                      DS8 4
     67          static u32 UserApp_u32Timeout;                      /* Timeout counter used across states */
     68          
     69          
     70          /**********************************************************************************************************************
     71          Function Definitions
     72          **********************************************************************************************************************/
     73          
     74          /*--------------------------------------------------------------------------------------------------------------------*/
     75          /* Public functions                                                                                                   */
     76          /*--------------------------------------------------------------------------------------------------------------------*/
     77          
     78          
     79          /*--------------------------------------------------------------------------------------------------------------------*/
     80          /* Protected functions                                                                                                */
     81          /*--------------------------------------------------------------------------------------------------------------------*/
     82          
     83          /*--------------------------------------------------------------------------------------------------------------------
     84          Function: UserAppInitialize
     85          
     86          Description:
     87          Initializes the State Machine and its variables.
     88          
     89          Requires:
     90            -
     91          
     92          Promises:
     93            - 
     94          */

   \                                 In section .text, align 2, keep-with-next
     95          void UserAppInitialize(void)
     96          {
   \                     UserAppInitialize: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     97            LCDCommand(LCD_CLEAR_CMD);
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      BL       LCDCommand
     98            LCDMessage(LINE1_START_ADDR, "Beat Mole!");
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable5
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      BL       LCDMessage
     99            LCDMessage(LINE2_START_ADDR, "Player1   ");
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   00000016   0x2040             MOVS     R0,#+64
   \   00000018   0x.... 0x....      BL       LCDMessage
    100            /* Configure ANT for this application */
    101            G_stAntSetupData.AntChannel          = ANT_CHANNEL_USERAPP;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \   00000022   0x7008             STRB     R0,[R1, #+0]
    102            G_stAntSetupData.AntSerialLo         = ANT_SERIAL_LO_USERAPP;
   \   00000024   0x20B3             MOVS     R0,#+179
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \   0000002A   0x70C8             STRB     R0,[R1, #+3]
    103            G_stAntSetupData.AntSerialHi         = ANT_SERIAL_HI_USERAPP;
   \   0000002C   0x2010             MOVS     R0,#+16
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \   00000032   0x7108             STRB     R0,[R1, #+4]
    104            G_stAntSetupData.AntDeviceType       = ANT_DEVICE_TYPE_USERAPP;
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \   0000003A   0x7148             STRB     R0,[R1, #+5]
    105            G_stAntSetupData.AntTransmissionType = ANT_TRANSMISSION_TYPE_USERAPP;
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \   00000042   0x7188             STRB     R0,[R1, #+6]
    106            G_stAntSetupData.AntChannelPeriodLo  = ANT_CHANNEL_PERIOD_LO_USERAPP;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \   0000004A   0x71C8             STRB     R0,[R1, #+7]
    107            G_stAntSetupData.AntChannelPeriodHi  = ANT_CHANNEL_PERIOD_HI_USERAPP;
   \   0000004C   0x2020             MOVS     R0,#+32
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \   00000052   0x7208             STRB     R0,[R1, #+8]
    108            G_stAntSetupData.AntFrequency        = ANT_FREQUENCY_USERAPP;
   \   00000054   0x2032             MOVS     R0,#+50
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \   0000005A   0x7248             STRB     R0,[R1, #+9]
    109            G_stAntSetupData.AntTxPower          = ANT_TX_POWER_USERAPP;
   \   0000005C   0x2003             MOVS     R0,#+3
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \   00000062   0x7288             STRB     R0,[R1, #+10]
    110          
    111            /* If good initialization, set state to Idle */
    112            if( AntChannelConfig(ANT_MASTER) )
   \   00000064   0x2001             MOVS     R0,#+1
   \   00000066   0x.... 0x....      BL       AntChannelConfig
   \   0000006A   0x2800             CMP      R0,#+0
   \   0000006C   0xD007             BEQ.N    ??UserAppInitialize_0
    113            {
    114              AntOpenChannel();
   \   0000006E   0x.... 0x....      BL       AntOpenChannel
    115              UserApp_StateMachine = UserAppSM_Idle;
   \   00000072   0x.... 0x....      ADR.W    R0,UserAppSM_Idle
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   0000007A   0x6008             STR      R0,[R1, #+0]
   \   0000007C   0xE004             B.N      ??UserAppInitialize_1
    116            }
    117            else
    118            {
    119              /* The task isn't properly initialized, so shut it down and don't run */
    120              UserApp_StateMachine = UserAppSM_FailedInit;
   \                     ??UserAppInitialize_0: (+1)
   \   0000007E   0x.... 0x....      ADR.W    R0,UserAppSM_FailedInit
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   00000086   0x6008             STR      R0,[R1, #+0]
    121            }
    122          
    123          } /* end UserAppInitialize() */
   \                     ??UserAppInitialize_1: (+1)
   \   00000088   0xBD01             POP      {R0,PC}          ;; return
    124          
    125          
    126          /*----------------------------------------------------------------------------------------------------------------------
    127          Function UserAppRunActiveState()
    128          
    129          Description:
    130          Selects and runs one iteration of the current state in the state machine.
    131          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    132          may take 1ms / n to execute.
    133          
    134          Requires:
    135            - State machine function pointer points at current state
    136          
    137          Promises:
    138            - Calls the function to pointed by the state machine function pointer
    139          */

   \                                 In section .text, align 2, keep-with-next
    140          void UserAppRunActiveState(void)
    141          {
   \                     UserAppRunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    142            UserApp_StateMachine();
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable5_3
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x4780             BLX      R0
    143          
    144          } /* end UserAppRunActiveState */
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    145          
    146          
    147          /*--------------------------------------------------------------------------------------------------------------------*/
    148          /* Private functions                                                                                                  */
    149          /*--------------------------------------------------------------------------------------------------------------------*/
    150          //Winner Music

   \                                 In section .text, align 2, keep-with-next
    151          static void WinnerMusic(void)
    152          {
   \                     WinnerMusic: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    153            static u8 u8notecounter = 0;
    154            static u16 u16buzzerrate[]  = {586,586,523,586,697,697,783,
    155            586,586,523,586,523,879,523,
    156            586,586,523,586,697,783,879,
    157            879,783,879,783,697,586,
    158            586,586,523,586,697,697,783,
    159            586,586,523,586,523,523,879,
    160            586,586,523,586,697,697,783,
    161            879,783,879,783,697,586,
    162            697,658,586,523,523,523,586,879,783,879,
    163            879,523,586,783,658,697,697,658,523,586,
    164            697,658,586,523,523,523,586,879,783,879,
    165            879,523,586,586,586,697,783,658,
    166            586,697,783,783,783,897,897,
    167            879,523,586,783,697,879,
    168            586,697,783,783,783,897,897,
    169            879,879,879,783,697,697,
    170            586,697,783,783,783,897,897,
    171            879,523,586,783,697,879,
    172            586,697,879,879,783,697,783,879,697,523,586,
    173            586,697,783,783,783,897,897,
    174            879,523,586,783,697,879,
    175            586,697,783,783,783,897,897,
    176            879,879,879,783,697,697,
    177            586,697,783,783,783,897,897,
    178            879,523,586,783,697,879,
    179            586,697,879,879,783,697,783,879,697,523,586,
    180            };
    181            static u16 u16counter = 0;
    182            
    183            u16counter++;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable5_4
   \   00000006   0x8800             LDRH     R0,[R0, #+0]
   \   00000008   0x1C40             ADDS     R0,R0,#+1
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable5_4
   \   0000000E   0x8008             STRH     R0,[R1, #+0]
    184            
    185            if(u16counter == 80)
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable5_4
   \   00000014   0x8800             LDRH     R0,[R0, #+0]
   \   00000016   0x2850             CMP      R0,#+80
   \   00000018   0xD120             BNE.N    ??WinnerMusic_0
    186            {
    187              u16counter=0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable5_4
   \   00000020   0x8008             STRH     R0,[R1, #+0]
    188              PWMAudioSetFrequency(BUZZER1, u16buzzerrate[u8notecounter]);
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable5_6
   \   0000002A   0x7809             LDRB     R1,[R1, #+0]
   \   0000002C   0xF830 0x1011      LDRH     R1,[R0, R1, LSL #+1]
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       PWMAudioSetFrequency
    189              PWMAudioOn(BUZZER1);
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x.... 0x....      BL       PWMAudioOn
    190              
    191              if(++u8notecounter == 192)
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable5_6
   \   00000040   0x7800             LDRB     R0,[R0, #+0]
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable5_6
   \   00000048   0x7008             STRB     R0,[R1, #+0]
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable5_6
   \   0000004E   0x7800             LDRB     R0,[R0, #+0]
   \   00000050   0x28C0             CMP      R0,#+192
   \   00000052   0xD103             BNE.N    ??WinnerMusic_0
    192              {
    193                u8notecounter=0;
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable5_6
   \   0000005A   0x7008             STRB     R0,[R1, #+0]
    194              }
    195            }
    196          } /* end winnerMusic() */
   \                     ??WinnerMusic_0: (+1)
   \   0000005C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 1
   \                     ??u8notecounter:
   \   00000000                      DS8 1

   \                                 In section .data, align 4
   \                     ??u16buzzerrate:
   \   00000000   0x024A 0x024A      DC16 586, 586, 523, 586, 697, 697, 783, 586, 586, 523, 586, 523, 879
   \              0x020B 0x024A
   \              0x02B9 0x02B9
   \              0x030F 0x024A
   \              0x024A 0x020B
   \              0x024A 0x020B
   \              0x036F       
   \   0000001A   0x020B 0x024A      DC16 523, 586, 586, 523, 586, 697, 783, 879, 879, 783, 879, 783, 697
   \              0x024A 0x020B
   \              0x024A 0x02B9
   \              0x030F 0x036F
   \              0x036F 0x030F
   \              0x036F 0x030F
   \              0x02B9       
   \   00000034   0x024A 0x024A      DC16 586, 586, 586, 523, 586, 697, 697, 783, 586, 586, 523, 586, 523
   \              0x024A 0x020B
   \              0x024A 0x02B9
   \              0x02B9 0x030F
   \              0x024A 0x024A
   \              0x020B 0x024A
   \              0x020B       
   \   0000004E   0x020B 0x036F      DC16 523, 879, 586, 586, 523, 586, 697, 697, 783, 879, 783, 879, 783
   \              0x024A 0x024A
   \              0x020B 0x024A
   \              0x02B9 0x02B9
   \              0x030F 0x036F
   \              0x030F 0x036F
   \              0x030F       
   \   00000068   0x02B9 0x024A      DC16 697, 586, 697, 658, 586, 523, 523, 523, 586, 879, 783, 879, 879
   \              0x02B9 0x0292
   \              0x024A 0x020B
   \              0x020B 0x020B
   \              0x024A 0x036F
   \              0x030F 0x036F
   \              0x036F       
   \   00000082   0x020B 0x024A      DC16 523, 586, 783, 658, 697, 697, 658, 523, 586, 697, 658, 586, 523
   \              0x030F 0x0292
   \              0x02B9 0x02B9
   \              0x0292 0x020B
   \              0x024A 0x02B9
   \              0x0292 0x024A
   \              0x020B       
   \   0000009C   0x020B 0x020B      DC16 523, 523, 586, 879, 783, 879, 879, 523, 586, 586, 586, 697, 783
   \              0x024A 0x036F
   \              0x030F 0x036F
   \              0x036F 0x020B
   \              0x024A 0x024A
   \              0x024A 0x02B9
   \              0x030F       
   \   000000B6   0x0292 0x024A      DC16 658, 586, 697, 783, 783, 783, 897, 897, 879, 523, 586, 783, 697
   \              0x02B9 0x030F
   \              0x030F 0x030F
   \              0x0381 0x0381
   \              0x036F 0x020B
   \              0x024A 0x030F
   \              0x02B9       
   \   000000D0   0x036F 0x024A      DC16 879, 586, 697, 783, 783, 783, 897, 897, 879, 879, 879, 783, 697
   \              0x02B9 0x030F
   \              0x030F 0x030F
   \              0x0381 0x0381
   \              0x036F 0x036F
   \              0x036F 0x030F
   \              0x02B9       
   \   000000EA   0x02B9 0x024A      DC16 697, 586, 697, 783, 783, 783, 897, 897, 879, 523, 586, 783, 697
   \              0x02B9 0x030F
   \              0x030F 0x030F
   \              0x0381 0x0381
   \              0x036F 0x020B
   \              0x024A 0x030F
   \              0x02B9       
   \   00000104   0x036F 0x024A      DC16 879, 586, 697, 879, 879, 783, 697, 783, 879, 697, 523, 586, 586
   \              0x02B9 0x036F
   \              0x036F 0x030F
   \              0x02B9 0x030F
   \              0x036F 0x02B9
   \              0x020B 0x024A
   \              0x024A       
   \   0000011E   0x02B9 0x030F      DC16 697, 783, 783, 783, 897, 897, 879, 523, 586, 783, 697, 879, 586
   \              0x030F 0x030F
   \              0x0381 0x0381
   \              0x036F 0x020B
   \              0x024A 0x030F
   \              0x02B9 0x036F
   \              0x024A       
   \   00000138   0x02B9 0x030F      DC16 697, 783, 783, 783, 897, 897, 879, 879, 879, 783, 697, 697, 586
   \              0x030F 0x030F
   \              0x0381 0x0381
   \              0x036F 0x036F
   \              0x036F 0x030F
   \              0x02B9 0x02B9
   \              0x024A       
   \   00000152   0x02B9 0x030F      DC16 697, 783, 783, 783, 897, 897, 879, 523, 586, 783, 697, 879, 586
   \              0x030F 0x030F
   \              0x0381 0x0381
   \              0x036F 0x020B
   \              0x024A 0x030F
   \              0x02B9 0x036F
   \              0x024A       
   \   0000016C   0x02B9 0x036F      DC16 697, 879, 879, 783, 697, 783, 879, 697, 523, 586
   \              0x036F 0x030F
   \              0x02B9 0x030F
   \              0x036F 0x02B9
   \              0x020B 0x024A

   \                                 In section .bss, align 2
   \                     ??u16counter:
   \   00000000                      DS8 2
    197          
    198          //Loser Music

   \                                 In section .text, align 2, keep-with-next
    199          static void LoserMusic(void)
    200          {
   \                     LoserMusic: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    201            static u8 u8notecounter = 0;
    202            static u16 u16buzzerrate[]  = {
    203            
    204            879,523,586,783,697,879,
    205            586,697,783,783,783,897,897,
    206            879,879,879,783,697,697,
    207            
    208            586,697,879,879,783,697,783,879,697,523,586,
    209            586,697,783,783,783,897,897,
    210            
    211            586,697,783,783,783,897,897,
    212            
    213            586,697,879,879,783,697,783,879,697,523,586,
    214            };
    215            static u16 u16counter = 0;
    216            
    217            u16counter++;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable5_7
   \   00000006   0x8800             LDRH     R0,[R0, #+0]
   \   00000008   0x1C40             ADDS     R0,R0,#+1
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \   0000000E   0x8008             STRH     R0,[R1, #+0]
    218            
    219            if(u16counter == 80)
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable5_7
   \   00000014   0x8800             LDRH     R0,[R0, #+0]
   \   00000016   0x2850             CMP      R0,#+80
   \   00000018   0xD120             BNE.N    ??LoserMusic_0
    220            {
    221              u16counter=0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \   00000020   0x8008             STRH     R0,[R1, #+0]
    222              PWMAudioSetFrequency(BUZZER1, u16buzzerrate[u8notecounter]);
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable5_8
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable5_9
   \   0000002A   0x7809             LDRB     R1,[R1, #+0]
   \   0000002C   0xF830 0x1011      LDRH     R1,[R0, R1, LSL #+1]
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       PWMAudioSetFrequency
    223              PWMAudioOn(BUZZER1);
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x.... 0x....      BL       PWMAudioOn
    224              
    225              if(++u8notecounter == 45)
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable5_9
   \   00000040   0x7800             LDRB     R0,[R0, #+0]
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable5_9
   \   00000048   0x7008             STRB     R0,[R1, #+0]
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable5_9
   \   0000004E   0x7800             LDRB     R0,[R0, #+0]
   \   00000050   0x282D             CMP      R0,#+45
   \   00000052   0xD103             BNE.N    ??LoserMusic_0
    226              {
    227                u8notecounter=0;
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable5_9
   \   0000005A   0x7008             STRB     R0,[R1, #+0]
    228              }
    229            }
    230          } /* end LoserMusic() */
   \                     ??LoserMusic_0: (+1)
   \   0000005C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 1
   \                     ??u8notecounter_1:
   \   00000000                      DS8 1

   \                                 In section .data, align 4
   \                     ??u16buzzerrate_1:
   \   00000000   0x036F 0x020B      DC16 879, 523, 586, 783, 697, 879, 586, 697, 783, 783, 783, 897, 897
   \              0x024A 0x030F
   \              0x02B9 0x036F
   \              0x024A 0x02B9
   \              0x030F 0x030F
   \              0x030F 0x0381
   \              0x0381       
   \   0000001A   0x036F 0x036F      DC16 879, 879, 879, 783, 697, 697, 586, 697, 879, 879, 783, 697, 783
   \              0x036F 0x030F
   \              0x02B9 0x02B9
   \              0x024A 0x02B9
   \              0x036F 0x036F
   \              0x030F 0x02B9
   \              0x030F       
   \   00000034   0x036F 0x02B9      DC16 879, 697, 523, 586, 586, 697, 783, 783, 783, 897, 897, 586, 697
   \              0x020B 0x024A
   \              0x024A 0x02B9
   \              0x030F 0x030F
   \              0x030F 0x0381
   \              0x0381 0x024A
   \              0x02B9       
   \   0000004E   0x030F 0x030F      DC16 783, 783, 783, 897, 897, 586, 697, 879, 879, 783, 697, 783, 879
   \              0x030F 0x0381
   \              0x0381 0x024A
   \              0x02B9 0x036F
   \              0x036F 0x030F
   \              0x02B9 0x030F
   \              0x036F       
   \   00000068   0x02B9 0x020B      DC16 697, 523, 586
   \              0x024A       
   \   0000006E   0x00 0x00          DC8 0, 0

   \                                 In section .bss, align 2
   \                     ??u16counter_1:
   \   00000000                      DS8 2
    231          //LED Flash

   \                                 In section .text, align 2, keep-with-next
    232          static void LedFlash(void)
    233          {
   \                     LedFlash: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    234            static u16 u16Count = 0;
    235            u16Count++;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable5_10
   \   00000006   0x8800             LDRH     R0,[R0, #+0]
   \   00000008   0x1C40             ADDS     R0,R0,#+1
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable5_10
   \   0000000E   0x8008             STRH     R0,[R1, #+0]
    236            static bool flag =0;
                                     ^
Warning[Pe188]: enumerated type mixed with another type
    237            if(u16Count == 500 && flag ==1)
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable5_10
   \   00000014   0x8800             LDRH     R0,[R0, #+0]
   \   00000016   0xF5B0 0x7FFA      CMP      R0,#+500
   \   0000001A   0xD12F             BNE.N    ??LedFlash_0
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable5_11
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x2801             CMP      R0,#+1
   \   00000024   0xD12A             BNE.N    ??LedFlash_0
    238            {
    239              flag = !flag;
                          ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable5_11
   \   0000002A   0x7800             LDRB     R0,[R0, #+0]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD104             BNE.N    ??LedFlash_1
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable5_11
   \   00000036   0x7008             STRB     R0,[R1, #+0]
   \   00000038   0xE003             B.N      ??LedFlash_2
   \                     ??LedFlash_1: (+1)
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable5_11
   \   00000040   0x7008             STRB     R0,[R1, #+0]
    240              u16Count = 0;
   \                     ??LedFlash_2: (+1)
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable5_10
   \   00000048   0x8008             STRH     R0,[R1, #+0]
    241              LedOn(WHITE);
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x.... 0x....      BL       LedOn
    242              LedOn(PURPLE);
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x.... 0x....      BL       LedOn
    243              LedOn(BLUE);
   \   00000056   0x2002             MOVS     R0,#+2
   \   00000058   0x.... 0x....      BL       LedOn
    244              LedOn(CYAN);
   \   0000005C   0x2003             MOVS     R0,#+3
   \   0000005E   0x.... 0x....      BL       LedOn
    245              LedOff(GREEN);
   \   00000062   0x2004             MOVS     R0,#+4
   \   00000064   0x.... 0x....      BL       LedOff
    246              LedOff(YELLOW);
   \   00000068   0x2005             MOVS     R0,#+5
   \   0000006A   0x.... 0x....      BL       LedOff
    247              LedOff(ORANGE);
   \   0000006E   0x2006             MOVS     R0,#+6
   \   00000070   0x.... 0x....      BL       LedOff
    248              LedOff(RED);
   \   00000074   0x2007             MOVS     R0,#+7
   \   00000076   0x.... 0x....      BL       LedOff
   \   0000007A   0xE034             B.N      ??LedFlash_3
    249            }
    250            else if(u16Count == 500 && flag ==0)
   \                     ??LedFlash_0: (+1)
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable5_10
   \   00000080   0x8800             LDRH     R0,[R0, #+0]
   \   00000082   0xF5B0 0x7FFA      CMP      R0,#+500
   \   00000086   0xD12E             BNE.N    ??LedFlash_3
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable5_11
   \   0000008C   0x7800             LDRB     R0,[R0, #+0]
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD129             BNE.N    ??LedFlash_3
    251            {
    252              flag = !flag;
                          ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable5_11
   \   00000096   0x7800             LDRB     R0,[R0, #+0]
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xD104             BNE.N    ??LedFlash_4
   \   0000009C   0x2001             MOVS     R0,#+1
   \   0000009E   0x.... 0x....      LDR.W    R1,??DataTable5_11
   \   000000A2   0x7008             STRB     R0,[R1, #+0]
   \   000000A4   0xE003             B.N      ??LedFlash_5
   \                     ??LedFlash_4: (+1)
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0x.... 0x....      LDR.W    R1,??DataTable5_11
   \   000000AC   0x7008             STRB     R0,[R1, #+0]
    253              u16Count = 0;
   \                     ??LedFlash_5: (+1)
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable5_10
   \   000000B4   0x8008             STRH     R0,[R1, #+0]
    254              LedOff(WHITE);
   \   000000B6   0x2000             MOVS     R0,#+0
   \   000000B8   0x.... 0x....      BL       LedOff
    255              LedOff(PURPLE);
   \   000000BC   0x2001             MOVS     R0,#+1
   \   000000BE   0x.... 0x....      BL       LedOff
    256              LedOff(BLUE);
   \   000000C2   0x2002             MOVS     R0,#+2
   \   000000C4   0x.... 0x....      BL       LedOff
    257              LedOff(CYAN);
   \   000000C8   0x2003             MOVS     R0,#+3
   \   000000CA   0x.... 0x....      BL       LedOff
    258              LedOn(GREEN);
   \   000000CE   0x2004             MOVS     R0,#+4
   \   000000D0   0x.... 0x....      BL       LedOn
    259              LedOn(YELLOW);
   \   000000D4   0x2005             MOVS     R0,#+5
   \   000000D6   0x.... 0x....      BL       LedOn
    260              LedOn(ORANGE);
   \   000000DA   0x2006             MOVS     R0,#+6
   \   000000DC   0x.... 0x....      BL       LedOn
    261              LedOn(RED);
   \   000000E0   0x2007             MOVS     R0,#+7
   \   000000E2   0x.... 0x....      BL       LedOn
    262            }
    263          }
   \                     ??LedFlash_3: (+1)
   \   000000E6   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 2
   \                     ??u16Count:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     ??flag:
   \   00000000                      DS8 1
    264          /**********************************************************************************************************************
    265          State Machine Function Definitions
    266          **********************************************************************************************************************/
    267          
    268          /*-------------------------------------------------------------------------------------------------------------------*/
    269          /* Wait for a message to be queued */

   \                                 In section .text, align 4, keep-with-next
    270          static void UserAppSM_Idle(void)
    271          {
   \                     UserAppSM_Idle: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    272            static u8 u8NextMole[]={0,6,13,19,19,13,6,0,
    273            13,19,6,0,13,13,13,19,
    274            19,0,0,6,19,13,0,6,19,
    275            13,19,19,19,19,13,13,0,
    276            13,19,19,0,0,6,6,6,
    277            0,0,6,6,0,6,13,19,6,
    278            0,0,6,13,13,13,19,6,
    279            0,19,13,13,6,6,13,13};
    280            static u8 *u8PointToNextMole=u8NextMole;
    281            static u8 u8CountForBit = 0;
    282            static u8 u8ClockDownForBegin[]="5";
    283            static u32 u32ClockDownForGame=0;
    284            static u16 u16ClockDownForBeginning=0;
    285            static u8 u8count=0;
    286            static u8 u8clockdown[3]="10";
    287            static bool flag = 0;
                                      ^
Warning[Pe188]: enumerated type mixed with another type
    288            static bool FlagForGame =0;
                                            ^
Warning[Pe188]: enumerated type mixed with another type
    289            static bool FlagW=0;
                                     ^
Warning[Pe188]: enumerated type mixed with another type
    290            static bool FlagL=0;
                                     ^
Warning[Pe188]: enumerated type mixed with another type
    291            //static bool FlagM = 0;
    292            static u8 u8tempfordisplay[3];
    293            
    294            
    295            static u8 au8SendNumber[] = {0x41, 0x61, 0, 0, 0xA5, 0, 0, 0};
    296            static u8 au8Receive[] = "xxxxxxxxxxxxxxxx";
    297            
    298            
    299            if(FlagForGame == 1)
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable5_12
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xF040 0x8237      BNE.W    ??UserAppSM_Idle_0
    300            {
    301              u16ClockDownForBeginning++;
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable5_13
   \   00000014   0x8800             LDRH     R0,[R0, #+0]
   \   00000016   0x1C40             ADDS     R0,R0,#+1
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable5_13
   \   0000001C   0x8008             STRH     R0,[R1, #+0]
    302              u8count++;
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable5_14
   \   00000022   0x7800             LDRB     R0,[R0, #+0]
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable5_14
   \   0000002A   0x7008             STRB     R0,[R1, #+0]
    303              u32ClockDownForGame++;
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable5_15
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x1C40             ADDS     R0,R0,#+1
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable5_15
   \   00000038   0x6008             STR      R0,[R1, #+0]
    304              
    305              //Clock Down For Beginning
    306              if(u16ClockDownForBeginning<8000 && (u16ClockDownForBeginning == 1000 ||
    307                                                   u16ClockDownForBeginning == 2000 ||
    308                                                   u16ClockDownForBeginning == 3000 ||
    309                                                   u16ClockDownForBeginning == 4000 ||
    310                                                   u16ClockDownForBeginning == 5000 ||
    311                                                   u16ClockDownForBeginning == 6000 ||
    312                                                   u16ClockDownForBeginning == 7000 ))
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable5_13
   \   0000003E   0x8800             LDRH     R0,[R0, #+0]
   \   00000040   0xF5B0 0x5FFA      CMP      R0,#+8000
   \   00000044   0xDA79             BGE.N    ??UserAppSM_Idle_1
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable5_13
   \   0000004A   0x8800             LDRH     R0,[R0, #+0]
   \   0000004C   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   00000050   0xD027             BEQ.N    ??UserAppSM_Idle_2
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable5_13
   \   00000056   0x8800             LDRH     R0,[R0, #+0]
   \   00000058   0xF5B0 0x6FFA      CMP      R0,#+2000
   \   0000005C   0xD021             BEQ.N    ??UserAppSM_Idle_2
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable5_13
   \   00000062   0x8800             LDRH     R0,[R0, #+0]
   \   00000064   0xF640 0x31B8      MOVW     R1,#+3000
   \   00000068   0x4288             CMP      R0,R1
   \   0000006A   0xD01A             BEQ.N    ??UserAppSM_Idle_2
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable5_13
   \   00000070   0x8800             LDRH     R0,[R0, #+0]
   \   00000072   0xF5B0 0x6F7A      CMP      R0,#+4000
   \   00000076   0xD014             BEQ.N    ??UserAppSM_Idle_2
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable5_13
   \   0000007C   0x8800             LDRH     R0,[R0, #+0]
   \   0000007E   0xF241 0x3188      MOVW     R1,#+5000
   \   00000082   0x4288             CMP      R0,R1
   \   00000084   0xD00D             BEQ.N    ??UserAppSM_Idle_2
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable5_13
   \   0000008A   0x8800             LDRH     R0,[R0, #+0]
   \   0000008C   0xF241 0x7170      MOVW     R1,#+6000
   \   00000090   0x4288             CMP      R0,R1
   \   00000092   0xD006             BEQ.N    ??UserAppSM_Idle_2
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable5_13
   \   00000098   0x8800             LDRH     R0,[R0, #+0]
   \   0000009A   0xF641 0x3158      MOVW     R1,#+7000
   \   0000009E   0x4288             CMP      R0,R1
   \   000000A0   0xD14B             BNE.N    ??UserAppSM_Idle_1
    313              {
    314                //FlagM = 0;
    315                LCDClearChars(LINE1_START_ADDR, 20);
   \                     ??UserAppSM_Idle_2: (+1)
   \   000000A2   0x2114             MOVS     R1,#+20
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0x.... 0x....      BL       LCDClearChars
    316                LCDMessage(LINE1_START_ADDR, "Clock Down:  s");
   \   000000AA   0x.... 0x....      LDR.W    R1,??DataTable5_16
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x.... 0x....      BL       LCDMessage
    317                LCDMessage(LINE1_START_ADDR+12, u8ClockDownForBegin);
   \   000000B4   0x.... 0x....      LDR.W    R1,??DataTable5_17
   \   000000B8   0x200C             MOVS     R0,#+12
   \   000000BA   0x.... 0x....      BL       LCDMessage
    318                LCDMessage(LINE2_START_ADDR, "Player1");
   \   000000BE   0x.... 0x....      LDR.W    R1,??DataTable5_18
   \   000000C2   0x2040             MOVS     R0,#+64
   \   000000C4   0x.... 0x....      BL       LCDMessage
    319                u8ClockDownForBegin[0]--;
   \   000000C8   0x.... 0x....      LDR.W    R0,??DataTable5_17
   \   000000CC   0x7800             LDRB     R0,[R0, #+0]
   \   000000CE   0x1E40             SUBS     R0,R0,#+1
   \   000000D0   0x.... 0x....      LDR.W    R1,??DataTable5_17
   \   000000D4   0x7008             STRB     R0,[R1, #+0]
    320                if(u8ClockDownForBegin[0] < '/')
   \   000000D6   0x.... 0x....      LDR.W    R0,??DataTable5_17
   \   000000DA   0x7800             LDRB     R0,[R0, #+0]
   \   000000DC   0x282F             CMP      R0,#+47
   \   000000DE   0xDA2C             BGE.N    ??UserAppSM_Idle_1
    321                {
    322                  flag = 1;
                              ^
Warning[Pe188]: enumerated type mixed with another type
   \   000000E0   0x2001             MOVS     R0,#+1
   \   000000E2   0x.... 0x....      LDR.W    R1,??DataTable5_19
   \   000000E6   0x7008             STRB     R0,[R1, #+0]
    323                  u32ClockDownForGame=0;
   \   000000E8   0x2000             MOVS     R0,#+0
   \   000000EA   0x.... 0x....      LDR.W    R1,??DataTable5_15
   \   000000EE   0x6008             STR      R0,[R1, #+0]
    324                  LCDCommand(LCD_CLEAR_CMD);
   \   000000F0   0x2001             MOVS     R0,#+1
   \   000000F2   0x.... 0x....      BL       LCDCommand
    325                  LCDMessage(LINE1_START_ADDR, "Player1 T:");
   \   000000F6   0x.... 0x....      LDR.W    R1,??DataTable5_20
   \   000000FA   0x2000             MOVS     R0,#+0
   \   000000FC   0x.... 0x....      BL       LCDMessage
    326                  LCDMessage(LINE1_START_ADDR+10,u8clockdown);
   \   00000100   0x.... 0x....      LDR.W    R1,??DataTable5_21
   \   00000104   0x200A             MOVS     R0,#+10
   \   00000106   0x.... 0x....      BL       LCDMessage
    327                  u8clockdown[0]='0';
   \   0000010A   0x2030             MOVS     R0,#+48
   \   0000010C   0x.... 0x....      LDR.W    R1,??DataTable5_21
   \   00000110   0x7008             STRB     R0,[R1, #+0]
    328                  u8clockdown[1]='9';
   \   00000112   0x2039             MOVS     R0,#+57
   \   00000114   0x.... 0x....      LDR.W    R1,??DataTable5_21
   \   00000118   0x7048             STRB     R0,[R1, #+1]
    329                  u8clockdown[2]='\0';
   \   0000011A   0x2000             MOVS     R0,#+0
   \   0000011C   0x.... 0x....      LDR.W    R1,??DataTable5_21
   \   00000120   0x7088             STRB     R0,[R1, #+2]
    330                  ButtonAcknowledge(BUTTON0);
   \   00000122   0x2000             MOVS     R0,#+0
   \   00000124   0x.... 0x....      BL       ButtonAcknowledge
    331                  ButtonAcknowledge(BUTTON1);
   \   00000128   0x2001             MOVS     R0,#+1
   \   0000012A   0x.... 0x....      BL       ButtonAcknowledge
    332                  ButtonAcknowledge(BUTTON2);
   \   0000012E   0x2002             MOVS     R0,#+2
   \   00000130   0x.... 0x....      BL       ButtonAcknowledge
    333                  ButtonAcknowledge(BUTTON3);
   \   00000134   0x2003             MOVS     R0,#+3
   \   00000136   0x.... 0x....      BL       ButtonAcknowledge
    334                }
    335              }
    336              
    337              //Game Start
    338              if(flag == 1&&u8count == 50)
   \                     ??UserAppSM_Idle_1: (+1)
   \   0000013A   0x.... 0x....      LDR.W    R0,??DataTable5_19
   \   0000013E   0x7800             LDRB     R0,[R0, #+0]
   \   00000140   0x2801             CMP      R0,#+1
   \   00000142   0xF040 0x80C6      BNE.W    ??UserAppSM_Idle_3
   \   00000146   0x.... 0x....      LDR.W    R0,??DataTable5_14
   \   0000014A   0x7800             LDRB     R0,[R0, #+0]
   \   0000014C   0x2832             CMP      R0,#+50
   \   0000014E   0xF040 0x80C0      BNE.W    ??UserAppSM_Idle_3
    339              {
    340                u8count = 0;
   \   00000152   0x2000             MOVS     R0,#+0
   \   00000154   0x.... 0x....      LDR.W    R1,??DataTable5_14
   \   00000158   0x7008             STRB     R0,[R1, #+0]
    341                LedOff(GREEN);
   \   0000015A   0x2004             MOVS     R0,#+4
   \   0000015C   0x.... 0x....      BL       LedOff
    342                LedOff(RED);
   \   00000160   0x2007             MOVS     R0,#+7
   \   00000162   0x.... 0x....      BL       LedOff
    343                LCDClearChars(LINE2_START_ADDR, 20);
   \   00000166   0x2114             MOVS     R1,#+20
   \   00000168   0x2040             MOVS     R0,#+64
   \   0000016A   0x.... 0x....      BL       LCDClearChars
    344                u8 u8Mole[]={'M','\0'};
                          ^
Warning[Pe177]: variable "u8Mole" was declared but never referenced
   \   0000016E   0x.... 0x....      LDR.W    R0,??DataTable5_22
   \   00000172   0x8800             LDRH     R0,[R0, #+0]
   \   00000174   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    345                LCDMessage(LINE2_START_ADDR+*u8PointToNextMole, "M");
   \   00000178   0xA18C             ADR.N    R1,??UserAppSM_Idle_4  ;; "M"
   \   0000017A   0x.... 0x....      LDR.W    R0,??DataTable5_23
   \   0000017E   0x6800             LDR      R0,[R0, #+0]
   \   00000180   0x7800             LDRB     R0,[R0, #+0]
   \   00000182   0x3040             ADDS     R0,R0,#+64
   \   00000184   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000186   0x.... 0x....      BL       LCDMessage
    346                if(WasButtonPressed(BUTTON0))
   \   0000018A   0x2000             MOVS     R0,#+0
   \   0000018C   0x.... 0x....      BL       WasButtonPressed
   \   00000190   0x2800             CMP      R0,#+0
   \   00000192   0xD021             BEQ.N    ??UserAppSM_Idle_5
    347                {
    348                   ButtonAcknowledge(BUTTON0);
   \   00000194   0x2000             MOVS     R0,#+0
   \   00000196   0x.... 0x....      BL       ButtonAcknowledge
    349                   if(*u8PointToNextMole == 0)
   \   0000019A   0x.... 0x....      LDR.W    R0,??DataTable5_23
   \   0000019E   0x6800             LDR      R0,[R0, #+0]
   \   000001A0   0x7800             LDRB     R0,[R0, #+0]
   \   000001A2   0x2800             CMP      R0,#+0
   \   000001A4   0xD10A             BNE.N    ??UserAppSM_Idle_6
    350                   {
    351                     u8CountForBit++;
   \   000001A6   0x.... 0x....      LDR.W    R0,??DataTable5_24
   \   000001AA   0x7800             LDRB     R0,[R0, #+0]
   \   000001AC   0x1C40             ADDS     R0,R0,#+1
   \   000001AE   0x.... 0x....      LDR.W    R1,??DataTable5_24
   \   000001B2   0x7008             STRB     R0,[R1, #+0]
    352                     LedOn(GREEN);
   \   000001B4   0x2004             MOVS     R0,#+4
   \   000001B6   0x.... 0x....      BL       LedOn
   \   000001BA   0xE002             B.N      ??UserAppSM_Idle_7
    353                   }
    354                   else
    355                   {
    356                     LedOn(RED);
   \                     ??UserAppSM_Idle_6: (+1)
   \   000001BC   0x2007             MOVS     R0,#+7
   \   000001BE   0x.... 0x....      BL       LedOn
    357                   }
    358                   LCDClearChars(LINE2_START_ADDR,20);
   \                     ??UserAppSM_Idle_7: (+1)
   \   000001C2   0x2114             MOVS     R1,#+20
   \   000001C4   0x2040             MOVS     R0,#+64
   \   000001C6   0x.... 0x....      BL       LCDClearChars
    359                   
    360                   u8PointToNextMole++;
   \   000001CA   0x.... 0x....      LDR.W    R0,??DataTable5_23
   \   000001CE   0x6800             LDR      R0,[R0, #+0]
   \   000001D0   0x1C40             ADDS     R0,R0,#+1
   \   000001D2   0x.... 0x....      LDR.W    R1,??DataTable5_23
   \   000001D6   0x6008             STR      R0,[R1, #+0]
    361                }
    362                if(WasButtonPressed(BUTTON1))
   \                     ??UserAppSM_Idle_5: (+1)
   \   000001D8   0x2001             MOVS     R0,#+1
   \   000001DA   0x.... 0x....      BL       WasButtonPressed
   \   000001DE   0x2800             CMP      R0,#+0
   \   000001E0   0xD021             BEQ.N    ??UserAppSM_Idle_8
    363                {
    364                   ButtonAcknowledge(BUTTON1);
   \   000001E2   0x2001             MOVS     R0,#+1
   \   000001E4   0x.... 0x....      BL       ButtonAcknowledge
    365                   if(*u8PointToNextMole == 6)
   \   000001E8   0x.... 0x....      LDR.W    R0,??DataTable5_23
   \   000001EC   0x6800             LDR      R0,[R0, #+0]
   \   000001EE   0x7800             LDRB     R0,[R0, #+0]
   \   000001F0   0x2806             CMP      R0,#+6
   \   000001F2   0xD10A             BNE.N    ??UserAppSM_Idle_9
    366                   {
    367                     u8CountForBit++;
   \   000001F4   0x.... 0x....      LDR.W    R0,??DataTable5_24
   \   000001F8   0x7800             LDRB     R0,[R0, #+0]
   \   000001FA   0x1C40             ADDS     R0,R0,#+1
   \   000001FC   0x.... 0x....      LDR.W    R1,??DataTable5_24
   \   00000200   0x7008             STRB     R0,[R1, #+0]
    368                     LedOn(GREEN);
   \   00000202   0x2004             MOVS     R0,#+4
   \   00000204   0x.... 0x....      BL       LedOn
   \   00000208   0xE002             B.N      ??UserAppSM_Idle_10
    369                   }
    370                   else
    371                   {
    372                     LedOn(RED);
   \                     ??UserAppSM_Idle_9: (+1)
   \   0000020A   0x2007             MOVS     R0,#+7
   \   0000020C   0x.... 0x....      BL       LedOn
    373                   }
    374                   LCDClearChars(LINE2_START_ADDR,20);
   \                     ??UserAppSM_Idle_10: (+1)
   \   00000210   0x2114             MOVS     R1,#+20
   \   00000212   0x2040             MOVS     R0,#+64
   \   00000214   0x.... 0x....      BL       LCDClearChars
    375                   
    376                   u8PointToNextMole++;
   \   00000218   0x.... 0x....      LDR.W    R0,??DataTable5_23
   \   0000021C   0x6800             LDR      R0,[R0, #+0]
   \   0000021E   0x1C40             ADDS     R0,R0,#+1
   \   00000220   0x.... 0x....      LDR.W    R1,??DataTable5_23
   \   00000224   0x6008             STR      R0,[R1, #+0]
    377                }
    378                if(WasButtonPressed(BUTTON2))
   \                     ??UserAppSM_Idle_8: (+1)
   \   00000226   0x2002             MOVS     R0,#+2
   \   00000228   0x.... 0x....      BL       WasButtonPressed
   \   0000022C   0x2800             CMP      R0,#+0
   \   0000022E   0xD01D             BEQ.N    ??UserAppSM_Idle_11
    379                {
    380                   ButtonAcknowledge(BUTTON2);
   \   00000230   0x2002             MOVS     R0,#+2
   \   00000232   0x.... 0x....      BL       ButtonAcknowledge
    381                   if(*u8PointToNextMole == 13)
   \   00000236   0x.... 0x....      LDR.W    R0,??DataTable5_23
   \   0000023A   0x6800             LDR      R0,[R0, #+0]
   \   0000023C   0x7800             LDRB     R0,[R0, #+0]
   \   0000023E   0x280D             CMP      R0,#+13
   \   00000240   0xD108             BNE.N    ??UserAppSM_Idle_12
    382                   {
    383                     u8CountForBit++;
   \   00000242   0x....             LDR.N    R0,??DataTable5_24
   \   00000244   0x7800             LDRB     R0,[R0, #+0]
   \   00000246   0x1C40             ADDS     R0,R0,#+1
   \   00000248   0x....             LDR.N    R1,??DataTable5_24
   \   0000024A   0x7008             STRB     R0,[R1, #+0]
    384                     LedOn(GREEN);
   \   0000024C   0x2004             MOVS     R0,#+4
   \   0000024E   0x.... 0x....      BL       LedOn
   \   00000252   0xE002             B.N      ??UserAppSM_Idle_13
    385                   }
    386                   else
    387                   {
    388                     LedOn(RED);
   \                     ??UserAppSM_Idle_12: (+1)
   \   00000254   0x2007             MOVS     R0,#+7
   \   00000256   0x.... 0x....      BL       LedOn
    389                   }
    390                   LCDClearChars(LINE2_START_ADDR,20);
   \                     ??UserAppSM_Idle_13: (+1)
   \   0000025A   0x2114             MOVS     R1,#+20
   \   0000025C   0x2040             MOVS     R0,#+64
   \   0000025E   0x.... 0x....      BL       LCDClearChars
    391                   
    392                   u8PointToNextMole++;
   \   00000262   0x....             LDR.N    R0,??DataTable5_23
   \   00000264   0x6800             LDR      R0,[R0, #+0]
   \   00000266   0x1C40             ADDS     R0,R0,#+1
   \   00000268   0x....             LDR.N    R1,??DataTable5_23
   \   0000026A   0x6008             STR      R0,[R1, #+0]
    393                }
    394                if(WasButtonPressed(BUTTON3))
   \                     ??UserAppSM_Idle_11: (+1)
   \   0000026C   0x2003             MOVS     R0,#+3
   \   0000026E   0x.... 0x....      BL       WasButtonPressed
   \   00000272   0x2800             CMP      R0,#+0
   \   00000274   0xD01C             BEQ.N    ??UserAppSM_Idle_14
    395                {
    396                   ButtonAcknowledge(BUTTON3);
   \   00000276   0x2003             MOVS     R0,#+3
   \   00000278   0x.... 0x....      BL       ButtonAcknowledge
    397                   if(*u8PointToNextMole == 19)
   \   0000027C   0x....             LDR.N    R0,??DataTable5_23
   \   0000027E   0x6800             LDR      R0,[R0, #+0]
   \   00000280   0x7800             LDRB     R0,[R0, #+0]
   \   00000282   0x2813             CMP      R0,#+19
   \   00000284   0xD108             BNE.N    ??UserAppSM_Idle_15
    398                   {
    399                     u8CountForBit++;
   \   00000286   0x....             LDR.N    R0,??DataTable5_24
   \   00000288   0x7800             LDRB     R0,[R0, #+0]
   \   0000028A   0x1C40             ADDS     R0,R0,#+1
   \   0000028C   0x....             LDR.N    R1,??DataTable5_24
   \   0000028E   0x7008             STRB     R0,[R1, #+0]
    400                     LedOn(GREEN);
   \   00000290   0x2004             MOVS     R0,#+4
   \   00000292   0x.... 0x....      BL       LedOn
   \   00000296   0xE002             B.N      ??UserAppSM_Idle_16
    401                   }
    402                   else
    403                   {
    404                     LedOn(RED);
   \                     ??UserAppSM_Idle_15: (+1)
   \   00000298   0x2007             MOVS     R0,#+7
   \   0000029A   0x.... 0x....      BL       LedOn
    405                   }
    406                   LCDClearChars(LINE2_START_ADDR,20);
   \                     ??UserAppSM_Idle_16: (+1)
   \   0000029E   0x2114             MOVS     R1,#+20
   \   000002A0   0x2040             MOVS     R0,#+64
   \   000002A2   0x.... 0x....      BL       LCDClearChars
    407                   
    408                   u8PointToNextMole++;
   \   000002A6   0x....             LDR.N    R0,??DataTable5_23
   \   000002A8   0x6800             LDR      R0,[R0, #+0]
   \   000002AA   0x1C40             ADDS     R0,R0,#+1
   \   000002AC   0x....             LDR.N    R1,??DataTable5_23
   \   000002AE   0x6008             STR      R0,[R1, #+0]
    409                }
    410                
    411                
    412          
    413                NumberToAscii(u8CountForBit,u8tempfordisplay);
   \                     ??UserAppSM_Idle_14: (+1)
   \   000002B0   0x....             LDR.N    R1,??DataTable5_25
   \   000002B2   0x....             LDR.N    R0,??DataTable5_24
   \   000002B4   0x7800             LDRB     R0,[R0, #+0]
   \   000002B6   0x.... 0x....      BL       NumberToAscii
    414                LCDClearChars(LINE1_START_ADDR+19,2);
   \   000002BA   0x2102             MOVS     R1,#+2
   \   000002BC   0x2013             MOVS     R0,#+19
   \   000002BE   0x.... 0x....      BL       LCDClearChars
    415                LCDMessage(LINE1_START_ADDR+14,"Num:");
   \   000002C2   0x....             LDR.N    R1,??DataTable5_26
   \   000002C4   0x200E             MOVS     R0,#+14
   \   000002C6   0x.... 0x....      BL       LCDMessage
    416                LCDMessage(LINE1_START_ADDR+18,u8tempfordisplay);
   \   000002CA   0x....             LDR.N    R1,??DataTable5_25
   \   000002CC   0x2012             MOVS     R0,#+18
   \   000002CE   0x.... 0x....      BL       LCDMessage
    417                
    418              }
    419              
    420              //Game Clock Down
    421              for(u8 i=1;i<11;i++)
   \                     ??UserAppSM_Idle_3: (+1)
   \   000002D2   0x2001             MOVS     R0,#+1
   \                     ??UserAppSM_Idle_17: (+1)
   \   000002D4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002D6   0x280B             CMP      R0,#+11
   \   000002D8   0xDA1C             BGE.N    ??UserAppSM_Idle_18
    422              {
    423                if(u32ClockDownForGame == 1000*i)
   \   000002DA   0x....             LDR.N    R1,??DataTable5_15
   \   000002DC   0x6809             LDR      R1,[R1, #+0]
   \   000002DE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002E0   0xF44F 0x727A      MOV      R2,#+1000
   \   000002E4   0xFB02 0xF200      MUL      R2,R2,R0
   \   000002E8   0x4291             CMP      R1,R2
   \   000002EA   0xD111             BNE.N    ??UserAppSM_Idle_19
    424                {
    425                  if(flag == 1)
   \   000002EC   0x....             LDR.N    R0,??DataTable5_19
   \   000002EE   0x7800             LDRB     R0,[R0, #+0]
   \   000002F0   0x2801             CMP      R0,#+1
   \   000002F2   0xD10C             BNE.N    ??UserAppSM_Idle_20
    426                  {
    427                    LCDClearChars(LINE1_START_ADDR+10,4);
   \   000002F4   0x2104             MOVS     R1,#+4
   \   000002F6   0x200A             MOVS     R0,#+10
   \   000002F8   0x.... 0x....      BL       LCDClearChars
    428                    LCDMessage(LINE1_START_ADDR+10,u8clockdown);
   \   000002FC   0x....             LDR.N    R1,??DataTable5_21
   \   000002FE   0x200A             MOVS     R0,#+10
   \   00000300   0x.... 0x....      BL       LCDMessage
    429                    u8clockdown[1]=u8clockdown[1]-1;
   \   00000304   0x....             LDR.N    R0,??DataTable5_21
   \   00000306   0x7840             LDRB     R0,[R0, #+1]
   \   00000308   0x1E40             SUBS     R0,R0,#+1
   \   0000030A   0x....             LDR.N    R1,??DataTable5_21
   \   0000030C   0x7048             STRB     R0,[R1, #+1]
    430                  }
    431                  break;
   \                     ??UserAppSM_Idle_20: (+1)
   \   0000030E   0xE001             B.N      ??UserAppSM_Idle_18
    432                }
    433              }
   \                     ??UserAppSM_Idle_19: (+1)
   \   00000310   0x1C40             ADDS     R0,R0,#+1
   \   00000312   0xE7DF             B.N      ??UserAppSM_Idle_17
    434              //Game End
    435              if(u32ClockDownForGame == 10000)
   \                     ??UserAppSM_Idle_18: (+1)
   \   00000314   0x....             LDR.N    R0,??DataTable5_15
   \   00000316   0x6800             LDR      R0,[R0, #+0]
   \   00000318   0xF242 0x7110      MOVW     R1,#+10000
   \   0000031C   0x4288             CMP      R0,R1
   \   0000031E   0xD10F             BNE.N    ??UserAppSM_Idle_21
    436              {
    437                flag = 0;
                            ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000320   0x2000             MOVS     R0,#+0
   \   00000322   0x....             LDR.N    R1,??DataTable5_19
   \   00000324   0x7008             STRB     R0,[R1, #+0]
    438                LCDCommand(LCD_CLEAR_CMD);
   \   00000326   0x2001             MOVS     R0,#+1
   \   00000328   0x.... 0x....      BL       LCDCommand
    439                LCDMessage(LINE1_START_ADDR, "TIME OUT!");
   \   0000032C   0x....             LDR.N    R1,??DataTable5_27
   \   0000032E   0x2000             MOVS     R0,#+0
   \   00000330   0x.... 0x....      BL       LCDMessage
    440                LedOff(GREEN);
   \   00000334   0x2004             MOVS     R0,#+4
   \   00000336   0x.... 0x....      BL       LedOff
    441                LedOff(RED);
   \   0000033A   0x2007             MOVS     R0,#+7
   \   0000033C   0x.... 0x....      BL       LedOff
    442              }
    443              if(u32ClockDownForGame > 11500)
   \                     ??UserAppSM_Idle_21: (+1)
   \   00000340   0x....             LDR.N    R0,??DataTable5_15
   \   00000342   0x6800             LDR      R0,[R0, #+0]
   \   00000344   0xF642 0x41ED      MOVW     R1,#+11501
   \   00000348   0x4288             CMP      R0,R1
   \   0000034A   0xD339             BCC.N    ??UserAppSM_Idle_22
    444              {
    445                u16ClockDownForBeginning = 8000;
   \   0000034C   0xF44F 0x50FA      MOV      R0,#+8000
   \   00000350   0x....             LDR.N    R1,??DataTable5_13
   \   00000352   0x8008             STRH     R0,[R1, #+0]
    446                u32ClockDownForGame = 10001;
   \   00000354   0xF242 0x7011      MOVW     R0,#+10001
   \   00000358   0x....             LDR.N    R1,??DataTable5_15
   \   0000035A   0x6008             STR      R0,[R1, #+0]
    447                if(u8CountForBit > (au8Receive[0]-48)*16+au8Receive[1]-48)
   \   0000035C   0x....             LDR.N    R0,??DataTable5_28
   \   0000035E   0x7800             LDRB     R0,[R0, #+0]
   \   00000360   0x....             LDR.N    R1,??DataTable5_28
   \   00000362   0x7849             LDRB     R1,[R1, #+1]
   \   00000364   0xEB11 0x1000      ADDS     R0,R1,R0, LSL #+4
   \   00000368   0xF5B0 0x704C      SUBS     R0,R0,#+816
   \   0000036C   0x....             LDR.N    R1,??DataTable5_24
   \   0000036E   0x7809             LDRB     R1,[R1, #+0]
   \   00000370   0x4288             CMP      R0,R1
   \   00000372   0xDA07             BGE.N    ??UserAppSM_Idle_23
    448                {
    449                  LCDMessage(LINE1_START_ADDR, "You are the winner !");
   \   00000374   0x....             LDR.N    R1,??DataTable5_29
   \   00000376   0x2000             MOVS     R0,#+0
   \   00000378   0x.... 0x....      BL       LCDMessage
    450                  FlagW = 1;
                               ^
Warning[Pe188]: enumerated type mixed with another type
   \   0000037C   0x2001             MOVS     R0,#+1
   \   0000037E   0x....             LDR.N    R1,??DataTable5_30
   \   00000380   0x7008             STRB     R0,[R1, #+0]
   \   00000382   0xE019             B.N      ??UserAppSM_Idle_24
    451                  //WinnerMusic();
    452                  //LedFlash();
    453                }
    454                else if(u8CountForBit < (au8Receive[0]-48)*16+au8Receive[1]-48)
   \                     ??UserAppSM_Idle_23: (+1)
   \   00000384   0x....             LDR.N    R0,??DataTable5_24
   \   00000386   0x7800             LDRB     R0,[R0, #+0]
   \   00000388   0x....             LDR.N    R1,??DataTable5_28
   \   0000038A   0x7809             LDRB     R1,[R1, #+0]
   \   0000038C   0x....             LDR.N    R2,??DataTable5_28
   \   0000038E   0x7852             LDRB     R2,[R2, #+1]
   \   00000390   0xEB12 0x1101      ADDS     R1,R2,R1, LSL #+4
   \   00000394   0xF5B1 0x714C      SUBS     R1,R1,#+816
   \   00000398   0x4288             CMP      R0,R1
   \   0000039A   0xDA09             BGE.N    ??UserAppSM_Idle_25
    455                {
    456                  LCDMessage(LINE1_START_ADDR, "You are the loser ! ");
   \   0000039C   0x....             LDR.N    R1,??DataTable5_31
   \   0000039E   0x2000             MOVS     R0,#+0
   \   000003A0   0x.... 0x....      BL       LCDMessage
    457                  FlagL = 1;
                               ^
Warning[Pe188]: enumerated type mixed with another type
   \   000003A4   0x2001             MOVS     R0,#+1
   \   000003A6   0x....             LDR.N    R1,??DataTable5_32
   \   000003A8   0x7008             STRB     R0,[R1, #+0]
   \   000003AA   0xE005             B.N      ??UserAppSM_Idle_24
   \                     ??UserAppSM_Idle_4:
   \   000003AC   0x4D 0x00          DC8      "M",0x0,0x0
   \              0x00 0x00    
    458                  //LoserMusic();
    459                  //LedFlash();
    460                }
    461                else
    462                {
    463                  LCDMessage(LINE1_START_ADDR, "Draw!               ");
   \                     ??UserAppSM_Idle_25: (+1)
   \   000003B0   0x....             LDR.N    R1,??DataTable5_33
   \   000003B2   0x2000             MOVS     R0,#+0
   \   000003B4   0x.... 0x....      BL       LCDMessage
    464                }
    465                LCDMessage(LINE2_START_ADDR, "Try again by B0      ");
   \                     ??UserAppSM_Idle_24: (+1)
   \   000003B8   0x....             LDR.N    R1,??DataTable5_34
   \   000003BA   0x2040             MOVS     R0,#+64
   \   000003BC   0x.... 0x....      BL       LCDMessage
    466              }
    467              //Game Again
    468              if(WasButtonPressed(BUTTON0)&&flag==0)
   \                     ??UserAppSM_Idle_22: (+1)
   \   000003C0   0x2000             MOVS     R0,#+0
   \   000003C2   0x.... 0x....      BL       WasButtonPressed
   \   000003C6   0x2800             CMP      R0,#+0
   \   000003C8   0xD049             BEQ.N    ??UserAppSM_Idle_26
   \   000003CA   0x....             LDR.N    R0,??DataTable5_19
   \   000003CC   0x7800             LDRB     R0,[R0, #+0]
   \   000003CE   0x2800             CMP      R0,#+0
   \   000003D0   0xD145             BNE.N    ??UserAppSM_Idle_26
    469                {
    470                  ButtonAcknowledge(BUTTON0);
   \   000003D2   0x2000             MOVS     R0,#+0
   \   000003D4   0x.... 0x....      BL       ButtonAcknowledge
    471                  LCDCommand(LCD_CLEAR_CMD);
   \   000003D8   0x2001             MOVS     R0,#+1
   \   000003DA   0x.... 0x....      BL       LCDCommand
    472                  u8PointToNextMole=u8NextMole;
   \   000003DE   0x....             LDR.N    R0,??DataTable5_35
   \   000003E0   0x....             LDR.N    R1,??DataTable5_23
   \   000003E2   0x6008             STR      R0,[R1, #+0]
    473                  u32ClockDownForGame = 0;
   \   000003E4   0x2000             MOVS     R0,#+0
   \   000003E6   0x....             LDR.N    R1,??DataTable5_15
   \   000003E8   0x6008             STR      R0,[R1, #+0]
    474                  u16ClockDownForBeginning = 0;
   \   000003EA   0x2000             MOVS     R0,#+0
   \   000003EC   0x....             LDR.N    R1,??DataTable5_13
   \   000003EE   0x8008             STRH     R0,[R1, #+0]
    475                  u8ClockDownForBegin[0]='5';
   \   000003F0   0x2035             MOVS     R0,#+53
   \   000003F2   0x....             LDR.N    R1,??DataTable5_17
   \   000003F4   0x7008             STRB     R0,[R1, #+0]
    476                  u8clockdown[0]='1';
   \   000003F6   0x2031             MOVS     R0,#+49
   \   000003F8   0x....             LDR.N    R1,??DataTable5_21
   \   000003FA   0x7008             STRB     R0,[R1, #+0]
    477                  u8clockdown[1]='0';
   \   000003FC   0x2030             MOVS     R0,#+48
   \   000003FE   0x....             LDR.N    R1,??DataTable5_21
   \   00000400   0x7048             STRB     R0,[R1, #+1]
    478                  FlagForGame =0;
                                     ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000402   0x2000             MOVS     R0,#+0
   \   00000404   0x....             LDR.N    R1,??DataTable5_12
   \   00000406   0x7008             STRB     R0,[R1, #+0]
    479                  u8count=0;
   \   00000408   0x2000             MOVS     R0,#+0
   \   0000040A   0x....             LDR.N    R1,??DataTable5_14
   \   0000040C   0x7008             STRB     R0,[R1, #+0]
    480                  u8CountForBit = 0;
   \   0000040E   0x2000             MOVS     R0,#+0
   \   00000410   0x....             LDR.N    R1,??DataTable5_24
   \   00000412   0x7008             STRB     R0,[R1, #+0]
    481                  FlagW = 0;
                               ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000414   0x2000             MOVS     R0,#+0
   \   00000416   0x....             LDR.N    R1,??DataTable5_30
   \   00000418   0x7008             STRB     R0,[R1, #+0]
    482                  FlagL = 0;
                               ^
Warning[Pe188]: enumerated type mixed with another type
   \   0000041A   0x2000             MOVS     R0,#+0
   \   0000041C   0x....             LDR.N    R1,??DataTable5_32
   \   0000041E   0x7008             STRB     R0,[R1, #+0]
    483                  //FlagM = 1;
    484                  LCDMessage(LINE1_START_ADDR, "Wait for a player...");
   \   00000420   0x....             LDR.N    R1,??DataTable5_36
   \   00000422   0x2000             MOVS     R0,#+0
   \   00000424   0x.... 0x....      BL       LCDMessage
    485                  PWMAudioOff(BUZZER1);
   \   00000428   0x2001             MOVS     R0,#+1
   \   0000042A   0x.... 0x....      BL       PWMAudioOff
    486                  LedOff(WHITE);
   \   0000042E   0x2000             MOVS     R0,#+0
   \   00000430   0x.... 0x....      BL       LedOff
    487                  LedOff(PURPLE);
   \   00000434   0x2001             MOVS     R0,#+1
   \   00000436   0x.... 0x....      BL       LedOff
    488                  LedOff(BLUE);
   \   0000043A   0x2002             MOVS     R0,#+2
   \   0000043C   0x.... 0x....      BL       LedOff
    489                  LedOff(CYAN);
   \   00000440   0x2003             MOVS     R0,#+3
   \   00000442   0x.... 0x....      BL       LedOff
    490                  LedOff(GREEN);
   \   00000446   0x2004             MOVS     R0,#+4
   \   00000448   0x.... 0x....      BL       LedOff
    491                  LedOff(YELLOW);
   \   0000044C   0x2005             MOVS     R0,#+5
   \   0000044E   0x.... 0x....      BL       LedOff
    492                  LedOff(ORANGE);
   \   00000452   0x2006             MOVS     R0,#+6
   \   00000454   0x.... 0x....      BL       LedOff
    493                  LedOff(RED);
   \   00000458   0x2007             MOVS     R0,#+7
   \   0000045A   0x.... 0x....      BL       LedOff
    494                  
    495                }
    496              /*if(FlagM == 1)
    497              {
    498                static u16 u16Countt = 0;
    499                static bool flag2 =0;
    500                u16Countt++;
    501                if(u16Countt == 500 && flag2 ==0)
    502                {
    503                  u16Countt = 0;
    504                  flag2 = 1;
    505                  LCDMessage(LINE1_START_ADDR, "Wait for a player ..");
    506                }
    507                else if(u16Countt == 500 && flag2 ==1)
    508                {
    509                  u16Countt = 0;
    510                  flag2 = 0;
    511                  LCDMessage(LINE1_START_ADDR, "Wait for a player . ");
    512                }
    513                
    514               } */
    515            
    516             
    517              if(FlagW == 1)
   \                     ??UserAppSM_Idle_26: (+1)
   \   0000045E   0x....             LDR.N    R0,??DataTable5_30
   \   00000460   0x7800             LDRB     R0,[R0, #+0]
   \   00000462   0x2801             CMP      R0,#+1
   \   00000464   0xD103             BNE.N    ??UserAppSM_Idle_27
    518              {
    519                WinnerMusic();
   \   00000466   0x.... 0x....      BL       WinnerMusic
    520                LedFlash();
   \   0000046A   0x.... 0x....      BL       LedFlash
    521              }
    522              if(FlagL == 1)
   \                     ??UserAppSM_Idle_27: (+1)
   \   0000046E   0x....             LDR.N    R0,??DataTable5_32
   \   00000470   0x7800             LDRB     R0,[R0, #+0]
   \   00000472   0x2801             CMP      R0,#+1
   \   00000474   0xD103             BNE.N    ??UserAppSM_Idle_0
    523              {
    524                LoserMusic();
   \   00000476   0x.... 0x....      BL       LoserMusic
    525                LedFlash();
   \   0000047A   0x.... 0x....      BL       LedFlash
    526              }
    527            }
    528            
    529            //Contact to another player by ANT 
    530            //Get the count and send it to another Machine when the count has changed
    531            au8SendNumber[0] = u8CountForBit;
   \                     ??UserAppSM_Idle_0: (+1)
   \   0000047E   0x....             LDR.N    R0,??DataTable5_24
   \   00000480   0x7800             LDRB     R0,[R0, #+0]
   \   00000482   0x....             LDR.N    R1,??DataTable5_37
   \   00000484   0x7008             STRB     R0,[R1, #+0]
    532            if(au8SendNumber[0] != au8SendNumber[1])
   \   00000486   0x....             LDR.N    R0,??DataTable5_37
   \   00000488   0x7800             LDRB     R0,[R0, #+0]
   \   0000048A   0x....             LDR.N    R1,??DataTable5_37
   \   0000048C   0x7849             LDRB     R1,[R1, #+1]
   \   0000048E   0x4288             CMP      R0,R1
   \   00000490   0xD002             BEQ.N    ??UserAppSM_Idle_28
    533            {
    534              AntQueueBroadcastMessage (au8SendNumber);
   \   00000492   0x....             LDR.N    R0,??DataTable5_37
   \   00000494   0x.... 0x....      BL       AntQueueBroadcastMessage
    535            }
    536            au8SendNumber[1] = u8CountForBit;
   \                     ??UserAppSM_Idle_28: (+1)
   \   00000498   0x....             LDR.N    R0,??DataTable5_24
   \   0000049A   0x7800             LDRB     R0,[R0, #+0]
   \   0000049C   0x....             LDR.N    R1,??DataTable5_37
   \   0000049E   0x7048             STRB     R0,[R1, #+1]
    537            //ANT READ
    538            if( AntReadData() )
   \   000004A0   0x.... 0x....      BL       AntReadData
   \   000004A4   0x2800             CMP      R0,#+0
   \   000004A6   0xD030             BEQ.N    ??UserAppSM_Idle_29
    539            {
    540              
    541               /* New data message: check what it is */
    542              if(G_eAntApiCurrentMessageClass == ANT_DATA)
   \   000004A8   0x....             LDR.N    R0,??DataTable5_38
   \   000004AA   0x7800             LDRB     R0,[R0, #+0]
   \   000004AC   0x2801             CMP      R0,#+1
   \   000004AE   0xD12C             BNE.N    ??UserAppSM_Idle_30
    543              {
    544                /* Get the number from another machine and parse it into au8Receive */
    545                for(u8 i = 0; i < ANT_DATA_BYTES; i++)
   \   000004B0   0x2400             MOVS     R4,#+0
   \                     ??UserAppSM_Idle_31: (+1)
   \   000004B2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000004B4   0x2C08             CMP      R4,#+8
   \   000004B6   0xDA1E             BGE.N    ??UserAppSM_Idle_32
    546                {
    547                  au8Receive[2 * i]     = HexToASCIICharUpper(G_au8AntApiCurrentData[i] / 16);
   \   000004B8   0x....             LDR.N    R0,??DataTable5_39
   \   000004BA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000004BC   0x5C20             LDRB     R0,[R4, R0]
   \   000004BE   0x2110             MOVS     R1,#+16
   \   000004C0   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000004C4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000004C6   0x.... 0x....      BL       HexToASCIICharUpper
   \   000004CA   0x....             LDR.N    R1,??DataTable5_28
   \   000004CC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000004CE   0xF801 0x0014      STRB     R0,[R1, R4, LSL #+1]
    548                  au8Receive[2 * i + 1] = HexToASCIICharUpper(G_au8AntApiCurrentData[i] % 16);
   \   000004D2   0x....             LDR.N    R0,??DataTable5_39
   \   000004D4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000004D6   0x5C21             LDRB     R1,[R4, R0]
   \   000004D8   0x2210             MOVS     R2,#+16
   \   000004DA   0xFB91 0xF0F2      SDIV     R0,R1,R2
   \   000004DE   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   000004E2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000004E4   0x.... 0x....      BL       HexToASCIICharUpper
   \   000004E8   0x....             LDR.N    R1,??DataTable5_28
   \   000004EA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000004EC   0xEB11 0x0144      ADDS     R1,R1,R4, LSL #+1
   \   000004F0   0x7048             STRB     R0,[R1, #+1]
    549                }
   \   000004F2   0x1C64             ADDS     R4,R4,#+1
   \   000004F4   0xE7DD             B.N      ??UserAppSM_Idle_31
    550                //Get the key and start the game
    551                if(strcmp(au8Receive,"0023456789ABCDEF")==0)
                                 ^
Warning[Pe167]: argument of type "u8 *" is incompatible with parameter of type
          "char const *"
   \                     ??UserAppSM_Idle_32: (+1)
   \   000004F6   0x....             LDR.N    R1,??DataTable5_40
   \   000004F8   0x....             LDR.N    R0,??DataTable5_28
   \   000004FA   0x.... 0x....      BL       strcmp
   \   000004FE   0x2800             CMP      R0,#+0
   \   00000500   0xD103             BNE.N    ??UserAppSM_Idle_29
    552                {
    553                  FlagForGame = 1;//static bool
                                     ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000502   0x2001             MOVS     R0,#+1
   \   00000504   0x....             LDR.N    R1,??DataTable5_12
   \   00000506   0x7008             STRB     R0,[R1, #+0]
   \   00000508   0xE7FF             B.N      ??UserAppSM_Idle_29
    554                }
    555              }
    556              else if(G_eAntApiCurrentMessageClass == ANT_TICK)
    557              {
    558               /* A channel period has gone by: typically this is when new data should be queued to be sent */
    559              
    560              }
    561            } /* end AntReadData() */
    562            
    563          } /* end UserAppSM_Idle() */
   \                     ??UserAppSM_Idle_30: (+1)
   \                     ??UserAppSM_Idle_29: (+1)
   \   0000050A   0xBD13             POP      {R0,R1,R4,PC}    ;; return

   \                                 In section .data, align 4
   \                     ??u8NextMole:
   \   00000000   0x00 0x06          DC8 0, 6, 13, 19, 19, 13, 6, 0, 13, 19, 6, 0, 13, 13, 13, 19, 19, 0, 0
   \              0x0D 0x13    
   \              0x13 0x0D    
   \              0x06 0x00    
   \              0x0D 0x13    
   \              0x06 0x00    
   \              0x0D 0x0D    
   \              0x0D 0x13    
   \              0x13 0x00    
   \              0x00         
   \   00000013   0x06 0x13          DC8 6, 19, 13, 0, 6, 19, 13, 19, 19, 19, 19, 13, 13, 0, 13, 19, 19, 0
   \              0x0D 0x00    
   \              0x06 0x13    
   \              0x0D 0x13    
   \              0x13 0x13    
   \              0x13 0x0D    
   \              0x0D 0x00    
   \              0x0D 0x13    
   \              0x13 0x00    
   \   00000025   0x00 0x06          DC8 0, 6, 6, 6, 0, 0, 6, 6, 0, 6, 13, 19, 6, 0, 0, 6, 13, 13, 13, 19, 6
   \              0x06 0x06    
   \              0x00 0x00    
   \              0x06 0x06    
   \              0x00 0x06    
   \              0x0D 0x13    
   \              0x06 0x00    
   \              0x00 0x06    
   \              0x0D 0x0D    
   \              0x0D 0x13    
   \              0x06         
   \   0000003A   0x00 0x13          DC8 0, 19, 13, 13, 6, 6, 13, 13, 0, 0
   \              0x0D 0x0D    
   \              0x06 0x06    
   \              0x0D 0x0D    
   \              0x00 0x00    

   \                                 In section .data, align 4
   \                     ??u8PointToNextMole:
   \   00000000   0x........         DC32 ??u8NextMole

   \                                 In section .bss, align 1
   \                     ??u8CountForBit:
   \   00000000                      DS8 1

   \                                 In section .data, align 2
   \                     ??u8ClockDownForBegin:
   \   00000000   0x35 0x00          DC8 "5"

   \                                 In section .bss, align 4
   \                     ??u32ClockDownForGame:
   \   00000000                      DS8 4

   \                                 In section .bss, align 2
   \                     ??u16ClockDownForBeginning:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     ??u8count:
   \   00000000                      DS8 1

   \                                 In section .data, align 4
   \                     ??u8clockdown:
   \   00000000   0x31 0x30          DC8 "10"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .bss, align 1
   \                     ??flag_1:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??FlagForGame:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??FlagW:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??FlagL:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     ??u8tempfordisplay:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
   \                     ??au8SendNumber:
   \   00000000   0x41 0x61          DC8 65, 97, 0, 0, 165, 0, 0, 0
   \              0x00 0x00    
   \              0xA5 0x00    
   \              0x00 0x00    

   \                                 In section .data, align 4
   \                     ??au8Receive:
   \   00000000   0x78 0x78          DC8 "xxxxxxxxxxxxxxxx"
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    564               
    565          
    566          /*-------------------------------------------------------------------------------------------------------------------*/
    567          /* Handle an error */
    568          static void UserAppSM_Error(void)          
                             ^
Warning[Pe177]: function "UserAppSM_Error" was declared but never referenced

  static u32 UserApp_u32Timeout;                      /* Timeout counter used across states */
             ^
"C:\Users\DK\Desktop\Razor_Atmel-master\Razor_Atmel-master\firmware_mpg_common\application\user_app.c",67  Warning[Pe177]: 
          variable "UserApp_u32Timeout" was declared but never referenced
    569          {
    570            
    571          } /* end UserAppSM_Error() */
    572          
    573          
    574          /*-------------------------------------------------------------------------------------------------------------------*/
    575          /* State to sit in if init failed */

   \                                 In section .text, align 4, keep-with-next
    576          static void UserAppSM_FailedInit(void)          
    577          {
    578              
    579          } /* end UserAppSM_FailedInit() */
   \                     UserAppSM_FailedInit: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     G_stAntSetupData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     UserApp_StateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     ??u16counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     ??u16buzzerrate

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     ??u8notecounter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     ??u16counter_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     ??u16buzzerrate_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     ??u8notecounter_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     ??u16Count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     ??flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x........         DC32     ??FlagForGame

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x........         DC32     ??u16ClockDownForBeginning

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   0x........         DC32     ??u8count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_15:
   \   00000000   0x........         DC32     ??u32ClockDownForGame

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_16:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_17:
   \   00000000   0x........         DC32     ??u8ClockDownForBegin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_18:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_19:
   \   00000000   0x........         DC32     ??flag_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_20:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_21:
   \   00000000   0x........         DC32     ??u8clockdown

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_22:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_23:
   \   00000000   0x........         DC32     ??u8PointToNextMole

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_24:
   \   00000000   0x........         DC32     ??u8CountForBit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_25:
   \   00000000   0x........         DC32     ??u8tempfordisplay

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_26:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_27:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_28:
   \   00000000   0x........         DC32     ??au8Receive

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_29:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_30:
   \   00000000   0x........         DC32     ??FlagW

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_31:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_32:
   \   00000000   0x........         DC32     ??FlagL

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_33:
   \   00000000   0x........         DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_34:
   \   00000000   0x........         DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_35:
   \   00000000   0x........         DC32     ??u8NextMole

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_36:
   \   00000000   0x........         DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_37:
   \   00000000   0x........         DC32     ??au8SendNumber

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_38:
   \   00000000   0x........         DC32     G_eAntApiCurrentMessageClass

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_39:
   \   00000000   0x........         DC32     G_au8AntApiCurrentData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_40:
   \   00000000   0x........         DC32     ?_14

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x42 0x65          DC8 "Beat Mole!"
   \              0x61 0x74    
   \              0x20 0x4D    
   \              0x6F 0x6C    
   \              0x65 0x21    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x50 0x6C          DC8 "Player1   "
   \              0x61 0x79    
   \              0x65 0x72    
   \              0x31 0x20    
   \              0x20 0x20    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x43 0x6C          DC8 "Clock Down:  s"
   \              0x6F 0x63    
   \              0x6B 0x20    
   \              0x44 0x6F    
   \              0x77 0x6E    
   \              0x3A 0x20    
   \              0x20 0x73    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x50 0x6C          DC8 "Player1"
   \              0x61 0x79    
   \              0x65 0x72    
   \              0x31 0x00    

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x50 0x6C          DC8 "Player1 T:"
   \              0x61 0x79    
   \              0x65 0x72    
   \              0x31 0x20    
   \              0x54 0x3A    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 2
   \                     ?_5:
   \   00000000   0x4D 0x00          DC8 77, 0

   \                                 In section .rodata, align 2
   \   00000000   0x4D 0x00          DC8 "M"

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x4E 0x75          DC8 "Num:"
   \              0x6D 0x3A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x54 0x49          DC8 "TIME OUT!"
   \              0x4D 0x45    
   \              0x20 0x4F    
   \              0x55 0x54    
   \              0x21 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x59 0x6F          DC8 "You are the winner !"
   \              0x75 0x20    
   \              0x61 0x72    
   \              0x65 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x77 0x69    
   \              0x6E 0x6E    
   \              0x65 0x72    
   \              0x20 0x21    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x59 0x6F          DC8 "You are the loser ! "
   \              0x75 0x20    
   \              0x61 0x72    
   \              0x65 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x6C 0x6F    
   \              0x73 0x65    
   \              0x72 0x20    
   \              0x21 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x44 0x72          DC8 "Draw!               "
   \              0x61 0x77    
   \              0x21 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x54 0x72          DC8 "Try again by B0      "
   \              0x79 0x20    
   \              0x61 0x67    
   \              0x61 0x69    
   \              0x6E 0x20    
   \              0x62 0x79    
   \              0x20 0x42    
   \              0x30 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x57 0x61          DC8 "Wait for a player..."
   \              0x69 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x61    
   \              0x20 0x70    
   \              0x6C 0x61    
   \              0x79 0x65    
   \              0x72 0x2E    
   \              0x2E 0x2E    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x30 0x30          DC8 "0023456789ABCDEF"
   \              0x32 0x33    
   \              0x34 0x35    
   \              0x36 0x37    
   \              0x38 0x39    
   \              0x41 0x42    
   \              0x43 0x44    
   \              0x45 0x46    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    580          
    581          
    582          /*--------------------------------------------------------------------------------------------------------------------*/
    583          /* End of File                                                                                                        */
    584          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   LedFlash
         8   -> LedOff
         8   -> LedOn
       8   LoserMusic
         8   -> PWMAudioOn
         8   -> PWMAudioSetFrequency
       8   UserAppInitialize
         8   -> AntChannelConfig
         8   -> AntOpenChannel
         8   -> LCDCommand
         8   -> LCDMessage
       8   UserAppRunActiveState
         8   -- Indirect call
       0   UserAppSM_FailedInit
      16   UserAppSM_Idle
        16   -> AntQueueBroadcastMessage
        16   -> AntReadData
        16   -> ButtonAcknowledge
        16   -> HexToASCIICharUpper
        16   -> LCDClearChars
        16   -> LCDCommand
        16   -> LCDMessage
        16   -> LedFlash
        16   -> LedOff
        16   -> LedOn
        16   -> LoserMusic
        16   -> NumberToAscii
        16   -> PWMAudioOff
        16   -> WasButtonPressed
        16   -> WinnerMusic
        16   -> strcmp
       8   WinnerMusic
         8   -> PWMAudioOn
         8   -> PWMAudioSetFrequency


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_16
       4  ??DataTable5_17
       4  ??DataTable5_18
       4  ??DataTable5_19
       4  ??DataTable5_2
       4  ??DataTable5_20
       4  ??DataTable5_21
       4  ??DataTable5_22
       4  ??DataTable5_23
       4  ??DataTable5_24
       4  ??DataTable5_25
       4  ??DataTable5_26
       4  ??DataTable5_27
       4  ??DataTable5_28
       4  ??DataTable5_29
       4  ??DataTable5_3
       4  ??DataTable5_30
       4  ??DataTable5_31
       4  ??DataTable5_32
       4  ??DataTable5_33
       4  ??DataTable5_34
       4  ??DataTable5_35
       4  ??DataTable5_36
       4  ??DataTable5_37
       4  ??DataTable5_38
       4  ??DataTable5_39
       4  ??DataTable5_4
       4  ??DataTable5_40
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      12  ?_0
      12  ?_1
      24  ?_10
      24  ?_11
      24  ?_12
      24  ?_13
      20  ?_14
      16  ?_2
       8  ?_3
      12  ?_4
       2  ?_5
       2  ?_6
       8  ?_7
      12  ?_8
      24  ?_9
       1  FlagForGame
       1  FlagL
       1  FlagW
       4  G_u32UserAppFlags
     232  LedFlash
      94  LoserMusic
     138  UserAppInitialize
      12  UserAppRunActiveState
       2  UserAppSM_FailedInit
    1292  UserAppSM_Idle
       4  UserApp_StateMachine
      94  WinnerMusic
      20  au8Receive
       8  au8SendNumber
       1  flag
       1  flag
       2  u16ClockDownForBeginning
       2  u16Count
     112  u16buzzerrate
     384  u16buzzerrate
       2  u16counter
       2  u16counter
       4  u32ClockDownForGame
       2  u8ClockDownForBegin
       1  u8CountForBit
      68  u8NextMole
       4  u8PointToNextMole
       4  u8clockdown
       1  u8count
       1  u8notecounter
       1  u8notecounter
       4  u8tempfordisplay

 
    33 bytes in section .bss
   602 bytes in section .data
   224 bytes in section .rodata
 2 028 bytes in section .text
 
 2 028 bytes of CODE  memory
   224 bytes of CONST memory
   635 bytes of DATA  memory

Errors: none
Warnings: 20
