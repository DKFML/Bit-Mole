###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        12/Jun/2016  15:07:29
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\DK\Desktop\EIE课程设计-单片机\Razor_Atmel-master\Razor_Atmel-master\firmware_mpg_common\application\user_app.c
#    Command line =  
#        C:\Users\DK\Desktop\EIE课程设计-单片机\Razor_Atmel-master\Razor_Atmel-master\firmware_mpg_common\application\user_app.c
#        -D MPGL1 -D MPG1 --preprocess=cl
#        C:\Users\DK\Desktop\EIE课程设计-单片机\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -lC
#        C:\Users\DK\Desktop\EIE课程设计-单片机\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -o
#        C:\Users\DK\Desktop\EIE课程设计-单片机\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\EIE课程设计-单片机\软件安装\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\DK\Desktop\EIE课程设计-单片机\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\
#        -I
#        C:\Users\DK\Desktop\EIE课程设计-单片机\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\bsp\
#        -I
#        C:\Users\DK\Desktop\EIE课程设计-单片机\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\drivers\
#        -I
#        C:\Users\DK\Desktop\EIE课程设计-单片机\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\application\
#        -I
#        C:\Users\DK\Desktop\EIE课程设计-单片机\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\
#        -I
#        C:\Users\DK\Desktop\EIE课程设计-单片机\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\application\
#        -I
#        C:\Users\DK\Desktop\EIE课程设计-单片机\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\cmsis\
#        -I
#        C:\Users\DK\Desktop\EIE课程设计-单片机\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\drivers\
#        -On --use_c++_inline -I
#        D:\EIE课程设计-单片机\软件安装\arm\CMSIS\Include\
#    List file    =  
#        C:\Users\DK\Desktop\EIE课程设计-单片机\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\Debug\List\user_app.lst
#    Object file  =  
#        C:\Users\DK\Desktop\EIE课程设计-单片机\Razor_Atmel-master\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\Debug\Obj\user_app.o
#
###############################################################################

C:\Users\DK\Desktop\EIE课程设计-单片机\Razor_Atmel-master\Razor_Atmel-master\firmware_mpg_common\application\user_app.c
      1          /**********************************************************************************************************************
      2          File: user_app.c                                                                
      3          
      4          ----------------------------------------------------------------------------------------------------------------------
      5          To start a new task using this user_app as a template:
      6           1. Copy both user_app.c and user_app.h to the Application directory
      7           2. Rename the files yournewtaskname.c and yournewtaskname.h
      8           3. Add yournewtaskname.c and yournewtaskname.h to the Application Include and Source groups in the IAR project
      9           4. Use ctrl-h (make sure "Match Case" is checked) to find and replace all instances of "user_app" with "yournewtaskname"
     10           5. Use ctrl-h to find and replace all instances of "UserApp" with "YourNewTaskName"
     11           6. Use ctrl-h to find and replace all instances of "USER_APP" with "YOUR_NEW_TASK_NAME"
     12           7. Add a call to YourNewTaskNameInitialize() in the init section of main
     13           8. Add a call to YourNewTaskNameRunActiveState() in the Super Loop section of main
     14           9. Update yournewtaskname.h per the instructions at the top of yournewtaskname.h
     15          10. Delete this text (between the dashed lines) and update the Description below to describe your task
     16          ----------------------------------------------------------------------------------------------------------------------
     17          
     18          Description:
     19          This is a user_app.c file template 
     20          
     21          ------------------------------------------------------------------------------------------------------------------------
     22          API:
     23          
     24          Public functions:
     25          
     26          
     27          Protected System functions:
     28          void UserAppInitialize(void)
     29          Runs required initialzation for the task.  Should only be called once in main init section.
     30          
     31          void UserAppRunActiveState(void)
     32          Runs current task state.  Should only be called once in main loop.
     33          
     34          
     35          **********************************************************************************************************************/
     36          
     37          #include "configuration.h"

  /**********************************************************************************************************************
                                                                                                                        ^
"C:\Users\DK\Desktop\EIE课程设计-单片机\Razor_Atmel-master\Razor_Atmel-master\firmware_mpg_common\configuration.h",1  Warning[Pa050]: 
          non-native end of line sequence detected (this diagnostic is only
          issued once)
     38          
     39          /***********************************************************************************************************************
     40          Global variable definitions with scope across entire project.
     41          All Global variable names shall start with "G_"
     42          ***********************************************************************************************************************/
     43          /* New variables */

   \                                 In section .bss, align 4
     44          volatile u32 G_u32UserAppFlags;                       /* Global state flags */
   \                     G_u32UserAppFlags:
   \   00000000                      DS8 4
     45          
     46          
     47          /*--------------------------------------------------------------------------------------------------------------------*/
     48          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     49          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     50          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     51          
     52          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     53          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     54          
     55          
     56          /***********************************************************************************************************************
     57          Global variable definitions with scope limited to this local application.
     58          Variable names shall start with "UserApp_" and be declared as static.
     59          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     60          static fnCode_type UserApp_StateMachine;            /* The state machine function pointer */
   \                     UserApp_StateMachine:
   \   00000000                      DS8 4
     61          static u32 UserApp_u32Timeout;                      /* Timeout counter used across states */
     62          
     63          
     64          /**********************************************************************************************************************
     65          Function Definitions
     66          **********************************************************************************************************************/
     67          
     68          /*--------------------------------------------------------------------------------------------------------------------*/
     69          /* Public functions                                                                                                   */
     70          /*--------------------------------------------------------------------------------------------------------------------*/
     71          
     72          
     73          /*--------------------------------------------------------------------------------------------------------------------*/
     74          /* Protected functions                                                                                                */
     75          /*--------------------------------------------------------------------------------------------------------------------*/
     76          
     77          /*--------------------------------------------------------------------------------------------------------------------
     78          Function: UserAppInitialize
     79          
     80          Description:
     81          Initializes the State Machine and its variables.
     82          
     83          Requires:
     84            -
     85          
     86          Promises:
     87            - 
     88          */

   \                                 In section .text, align 2, keep-with-next
     89          void UserAppInitialize(void)
     90          {
   \                     UserAppInitialize: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
     91            //Clear and message
     92            u8 au8WelcomeMessage[]="Bit Mloe !";
   \   00000002   0xA800             ADD      R0,SP,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable2_2
   \   00000006   0x220B             MOVS     R2,#+11
   \   00000008   0x.... 0x....      BL       __aeabi_memcpy
     93            //u8 au8Hint[]="Press B0 to start";
     94            LCDCommand(LCD_CLEAR_CMD);
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      BL       LCDCommand
     95            LCDMessage(LINE1_START_ADDR, au8WelcomeMessage);
   \   00000012   0xA900             ADD      R1,SP,#+0
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       LCDMessage
     96            //LCDMessage(LINE1_SRART_ADDR, au8Hint);
     97            /* If good initialization, set state to Idle */
     98            if( 1 )
     99            {
    100              UserApp_StateMachine = UserAppSM_Idle;
   \   0000001A   0x.... 0x....      ADR.W    R0,UserAppSM_Idle
   \   0000001E   0x....             LDR.N    R1,??DataTable2_3
   \   00000020   0x6008             STR      R0,[R1, #+0]
    101            }
    102            else
    103            {
    104              /* The task isn't properly initialized, so shut it down and don't run */
    105              UserApp_StateMachine = UserAppSM_FailedInit;
    106            }
    107          
    108          } /* end UserAppInitialize() */
   \   00000022   0xBD07             POP      {R0-R2,PC}       ;; return
    109          
    110          
    111          /*----------------------------------------------------------------------------------------------------------------------
    112          Function UserAppRunActiveState()
    113          
    114          Description:
    115          Selects and runs one iteration of the current state in the state machine.
    116          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    117          may take 1ms / n to execute.
    118          
    119          Requires:
    120            - State machine function pointer points at current state
    121          
    122          Promises:
    123            - Calls the function to pointed by the state machine function pointer
    124          */

   \                                 In section .text, align 2, keep-with-next
    125          void UserAppRunActiveState(void)
    126          {
   \                     UserAppRunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    127            UserApp_StateMachine();
   \   00000002   0x....             LDR.N    R0,??DataTable2_3
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    128          
    129          } /* end UserAppRunActiveState */
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    130          
    131          
    132          /*--------------------------------------------------------------------------------------------------------------------*/
    133          /* Private functions                                                                                                  */
    134          /*--------------------------------------------------------------------------------------------------------------------*/
    135          
    136          
    137          /**********************************************************************************************************************
    138          State Machine Function Definitions
    139          **********************************************************************************************************************/
    140          
    141          /*-------------------------------------------------------------------------------------------------------------------*/
    142          /* Wait for a message to be queued */

   \                                 In section .text, align 4, keep-with-next
    143          static void UserAppSM_Idle(void)
    144          {
   \                     UserAppSM_Idle: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    145            static u8 PositionOfTheMloeWillBe[]={0,6,13,19,19,13,6,0};
    146            static u8 *PointToPositionOfTheMloeWillBe=PositionOfTheMloeWillBe;
    147            static u8 CountForBit = 0;
    148            static u8 ClockDownForBegin[]="5";
    149            static u32 ClockDownForGame=0;
    150            static u16 ClockDownForBeginning=0;
    151            static bool flag = 0;
                                      ^
Warning[Pe188]: enumerated type mixed with another type
    152            ClockDownForBeginning++;
   \   00000002   0x....             LDR.N    R0,??DataTable2_4
   \   00000004   0x8800             LDRH     R0,[R0, #+0]
   \   00000006   0x1C40             ADDS     R0,R0,#+1
   \   00000008   0x....             LDR.N    R1,??DataTable2_4
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
    153            //The message watting for player
    154            //LCDMesage(LINE1_START_ADDR, "Watting for player..");
    155            
    156            //Clock Down For The Game 
    157            if(ClockDownForBeginning<7000 && ClockDownForBeginning % 1000 == 0)
   \   0000000C   0x....             LDR.N    R0,??DataTable2_4
   \   0000000E   0x8800             LDRH     R0,[R0, #+0]
   \   00000010   0xF641 0x3158      MOVW     R1,#+7000
   \   00000014   0x4288             CMP      R0,R1
   \   00000016   0xDA21             BGE.N    ??UserAppSM_Idle_0
   \   00000018   0x....             LDR.N    R0,??DataTable2_4
   \   0000001A   0x8800             LDRH     R0,[R0, #+0]
   \   0000001C   0xF44F 0x717A      MOV      R1,#+1000
   \   00000020   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000024   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD117             BNE.N    ??UserAppSM_Idle_0
    158            {
    159              LCDMessage(LINE1_START_ADDR, "Clock Down:");
   \   0000002C   0x....             LDR.N    R1,??DataTable2_5
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      BL       LCDMessage
    160              LCDMessage(LINE1_START_ADDR+12, ClockDownForBegin);
   \   00000034   0x....             LDR.N    R1,??DataTable2_6
   \   00000036   0x200C             MOVS     R0,#+12
   \   00000038   0x.... 0x....      BL       LCDMessage
    161              LCDMessage(LINE1_START_ADDR+13, "s");
   \   0000003C   0x....             ADR.N    R1,??DataTable2  ;; "s"
   \   0000003E   0x200D             MOVS     R0,#+13
   \   00000040   0x.... 0x....      BL       LCDMessage
    162              ClockDownForBegin[0]--;
   \   00000044   0x....             LDR.N    R0,??DataTable2_6
   \   00000046   0x7800             LDRB     R0,[R0, #+0]
   \   00000048   0x1E40             SUBS     R0,R0,#+1
   \   0000004A   0x....             LDR.N    R1,??DataTable2_6
   \   0000004C   0x7008             STRB     R0,[R1, #+0]
    163              if(ClockDownForBegin[0] < '0')
   \   0000004E   0x....             LDR.N    R0,??DataTable2_6
   \   00000050   0x7800             LDRB     R0,[R0, #+0]
   \   00000052   0x2830             CMP      R0,#+48
   \   00000054   0xDA02             BGE.N    ??UserAppSM_Idle_0
    164              {
    165                flag = 1;
                            ^
Warning[Pe188]: enumerated type mixed with another type

    static u32 ClockDownForGame=0;
               ^
"C:\Users\DK\Desktop\EIE课程设计-单片机\Razor_Atmel-master\Razor_Atmel-master\firmware_mpg_common\application\user_app.c",149  Warning[Pe177]: 
          variable "ClockDownForGame" was declared but never referenced
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x....             LDR.N    R1,??DataTable2_7
   \   0000005A   0x7008             STRB     R0,[R1, #+0]
    166              }
    167            }
    168            
    169            //Game Start
    170            if(flag == 1)
   \                     ??UserAppSM_Idle_0: (+1)
   \   0000005C   0x....             LDR.N    R0,??DataTable2_7
   \   0000005E   0x7800             LDRB     R0,[R0, #+0]
   \   00000060   0x2801             CMP      R0,#+1
   \   00000062   0xD16A             BNE.N    ??UserAppSM_Idle_1
    171            {
    172              LCDCommand(LCD_CLEAR_CMD);
   \   00000064   0x2001             MOVS     R0,#+1
   \   00000066   0x.... 0x....      BL       LCDCommand
    173              LCDMessage(LINE1_START_ADDR, "play1     play2");
   \   0000006A   0x....             LDR.N    R1,??DataTable2_8
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x.... 0x....      BL       LCDMessage
    174              LCDMessage(LINE2_START_ADDR+*PointToPositionOfTheMloeWillBe, "M");
   \   00000072   0x....             ADR.N    R1,??DataTable2_1  ;; "M"
   \   00000074   0x....             LDR.N    R0,??DataTable2_9
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0x7800             LDRB     R0,[R0, #+0]
   \   0000007A   0x3040             ADDS     R0,R0,#+64
   \   0000007C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007E   0x.... 0x....      BL       LCDMessage
    175              if(WasButtonPressed(BUTTON0))
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x.... 0x....      BL       WasButtonPressed
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD011             BEQ.N    ??UserAppSM_Idle_2
    176              {
    177                 ButtonAcknowledge(BUTTON0);
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x.... 0x....      BL       ButtonAcknowledge
    178                 if(*PointToPositionOfTheMloeWillBe == 0)
   \   00000092   0x....             LDR.N    R0,??DataTable2_9
   \   00000094   0x6800             LDR      R0,[R0, #+0]
   \   00000096   0x7800             LDRB     R0,[R0, #+0]
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xD104             BNE.N    ??UserAppSM_Idle_3
    179                 {
    180                   CountForBit++;
   \   0000009C   0x....             LDR.N    R0,??DataTable2_10
   \   0000009E   0x7800             LDRB     R0,[R0, #+0]
   \   000000A0   0x1C40             ADDS     R0,R0,#+1
   \   000000A2   0x....             LDR.N    R1,??DataTable2_10
   \   000000A4   0x7008             STRB     R0,[R1, #+0]
    181                 }
    182                 PointToPositionOfTheMloeWillBe++;
   \                     ??UserAppSM_Idle_3: (+1)
   \   000000A6   0x....             LDR.N    R0,??DataTable2_9
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0x1C40             ADDS     R0,R0,#+1
   \   000000AC   0x....             LDR.N    R1,??DataTable2_9
   \   000000AE   0x6008             STR      R0,[R1, #+0]
    183              }
    184              if(WasButtonPressed(BUTTON1))
   \                     ??UserAppSM_Idle_2: (+1)
   \   000000B0   0x2001             MOVS     R0,#+1
   \   000000B2   0x.... 0x....      BL       WasButtonPressed
   \   000000B6   0x2800             CMP      R0,#+0
   \   000000B8   0xD011             BEQ.N    ??UserAppSM_Idle_4
    185              {
    186                 ButtonAcknowledge(BUTTON1);
   \   000000BA   0x2001             MOVS     R0,#+1
   \   000000BC   0x.... 0x....      BL       ButtonAcknowledge
    187                 if(*PointToPositionOfTheMloeWillBe == 0)
   \   000000C0   0x....             LDR.N    R0,??DataTable2_9
   \   000000C2   0x6800             LDR      R0,[R0, #+0]
   \   000000C4   0x7800             LDRB     R0,[R0, #+0]
   \   000000C6   0x2800             CMP      R0,#+0
   \   000000C8   0xD104             BNE.N    ??UserAppSM_Idle_5
    188                 {
    189                   CountForBit++;
   \   000000CA   0x....             LDR.N    R0,??DataTable2_10
   \   000000CC   0x7800             LDRB     R0,[R0, #+0]
   \   000000CE   0x1C40             ADDS     R0,R0,#+1
   \   000000D0   0x....             LDR.N    R1,??DataTable2_10
   \   000000D2   0x7008             STRB     R0,[R1, #+0]
    190                 }
    191                 PointToPositionOfTheMloeWillBe++;
   \                     ??UserAppSM_Idle_5: (+1)
   \   000000D4   0x....             LDR.N    R0,??DataTable2_9
   \   000000D6   0x6800             LDR      R0,[R0, #+0]
   \   000000D8   0x1C40             ADDS     R0,R0,#+1
   \   000000DA   0x....             LDR.N    R1,??DataTable2_9
   \   000000DC   0x6008             STR      R0,[R1, #+0]
    192              }
    193              if(WasButtonPressed(BUTTON2))
   \                     ??UserAppSM_Idle_4: (+1)
   \   000000DE   0x2002             MOVS     R0,#+2
   \   000000E0   0x.... 0x....      BL       WasButtonPressed
   \   000000E4   0x2800             CMP      R0,#+0
   \   000000E6   0xD011             BEQ.N    ??UserAppSM_Idle_6
    194              {
    195                 ButtonAcknowledge(BUTTON2);
   \   000000E8   0x2002             MOVS     R0,#+2
   \   000000EA   0x.... 0x....      BL       ButtonAcknowledge
    196                 if(*PointToPositionOfTheMloeWillBe == 0)
   \   000000EE   0x....             LDR.N    R0,??DataTable2_9
   \   000000F0   0x6800             LDR      R0,[R0, #+0]
   \   000000F2   0x7800             LDRB     R0,[R0, #+0]
   \   000000F4   0x2800             CMP      R0,#+0
   \   000000F6   0xD104             BNE.N    ??UserAppSM_Idle_7
    197                 {
    198                   CountForBit++;
   \   000000F8   0x....             LDR.N    R0,??DataTable2_10
   \   000000FA   0x7800             LDRB     R0,[R0, #+0]
   \   000000FC   0x1C40             ADDS     R0,R0,#+1
   \   000000FE   0x....             LDR.N    R1,??DataTable2_10
   \   00000100   0x7008             STRB     R0,[R1, #+0]
    199                 }
    200                 PointToPositionOfTheMloeWillBe++;
   \                     ??UserAppSM_Idle_7: (+1)
   \   00000102   0x....             LDR.N    R0,??DataTable2_9
   \   00000104   0x6800             LDR      R0,[R0, #+0]
   \   00000106   0x1C40             ADDS     R0,R0,#+1
   \   00000108   0x....             LDR.N    R1,??DataTable2_9
   \   0000010A   0x6008             STR      R0,[R1, #+0]
    201              }
    202              if(WasButtonPressed(BUTTON3))
   \                     ??UserAppSM_Idle_6: (+1)
   \   0000010C   0x2003             MOVS     R0,#+3
   \   0000010E   0x.... 0x....      BL       WasButtonPressed
   \   00000112   0x2800             CMP      R0,#+0
   \   00000114   0xD011             BEQ.N    ??UserAppSM_Idle_1
    203              {
    204                 ButtonAcknowledge(BUTTON3);
   \   00000116   0x2003             MOVS     R0,#+3
   \   00000118   0x.... 0x....      BL       ButtonAcknowledge
    205                 if(*PointToPositionOfTheMloeWillBe == 0)
   \   0000011C   0x....             LDR.N    R0,??DataTable2_9
   \   0000011E   0x6800             LDR      R0,[R0, #+0]
   \   00000120   0x7800             LDRB     R0,[R0, #+0]
   \   00000122   0x2800             CMP      R0,#+0
   \   00000124   0xD104             BNE.N    ??UserAppSM_Idle_8
    206                 {
    207                   CountForBit++;
   \   00000126   0x....             LDR.N    R0,??DataTable2_10
   \   00000128   0x7800             LDRB     R0,[R0, #+0]
   \   0000012A   0x1C40             ADDS     R0,R0,#+1
   \   0000012C   0x....             LDR.N    R1,??DataTable2_10
   \   0000012E   0x7008             STRB     R0,[R1, #+0]
    208                 }
    209                 PointToPositionOfTheMloeWillBe++;
   \                     ??UserAppSM_Idle_8: (+1)
   \   00000130   0x....             LDR.N    R0,??DataTable2_9
   \   00000132   0x6800             LDR      R0,[R0, #+0]
   \   00000134   0x1C40             ADDS     R0,R0,#+1
   \   00000136   0x....             LDR.N    R1,??DataTable2_9
   \   00000138   0x6008             STR      R0,[R1, #+0]
    210              }
    211              
    212            }
    213              
    214          } /* end UserAppSM_Idle() */
   \                     ??UserAppSM_Idle_1: (+1)
   \   0000013A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .data, align 4
   \                     ??PositionOfTheMloeWillBe:
   \   00000000   0x00 0x06          DC8 0, 6, 13, 19, 19, 13, 6, 0
   \              0x0D 0x13    
   \              0x13 0x0D    
   \              0x06 0x00    

   \                                 In section .data, align 4
   \                     ??PointToPositionOfTheMloeWillBe:
   \   00000000   0x........         DC32 ??PositionOfTheMloeWillBe

   \                                 In section .bss, align 1
   \                     ??CountForBit:
   \   00000000                      DS8 1

   \                                 In section .data, align 2
   \                     ??ClockDownForBegin:
   \   00000000   0x35 0x00          DC8 "5"

   \                                 In section .bss, align 2
   \                     ??ClockDownForBeginning:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     ??flag:
   \   00000000                      DS8 1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x73 0x00          DC8      "s",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x4D 0x00          DC8      "M",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     UserApp_StateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     ??ClockDownForBeginning

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     ??ClockDownForBegin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     ??flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x........         DC32     ??PointToPositionOfTheMloeWillBe

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x........         DC32     ??CountForBit

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x42 0x69          DC8 "Bit Mloe !"
   \              0x74 0x20    
   \              0x4D 0x6C    
   \              0x6F 0x65    
   \              0x20 0x21    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x43 0x6C          DC8 "Clock Down:"
   \              0x6F 0x63    
   \              0x6B 0x20    
   \              0x44 0x6F    
   \              0x77 0x6E    
   \              0x3A 0x00    

   \                                 In section .rodata, align 2
   \   00000000   0x73 0x00          DC8 "s"

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x70 0x6C          DC8 "play1     play2"
   \              0x61 0x79    
   \              0x31 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x70 0x6C    
   \              0x61 0x79    
   \              0x32 0x00    

   \                                 In section .rodata, align 2
   \   00000000   0x4D 0x00          DC8 "M"
    215               
    216          
    217          /*-------------------------------------------------------------------------------------------------------------------*/
    218          /* Handle an error */
    219          static void UserAppSM_Error(void)          
                             ^
Warning[Pe177]: function "UserAppSM_Error" was declared but never referenced

  static u32 UserApp_u32Timeout;                      /* Timeout counter used across states */
             ^
"C:\Users\DK\Desktop\EIE课程设计-单片机\Razor_Atmel-master\Razor_Atmel-master\firmware_mpg_common\application\user_app.c",61  Warning[Pe177]: 
          variable "UserApp_u32Timeout" was declared but never referenced
    220          {
    221            
    222          } /* end UserAppSM_Error() */
    223          
    224          
    225          /*-------------------------------------------------------------------------------------------------------------------*/
    226          /* State to sit in if init failed */
    227          static void UserAppSM_FailedInit(void)          
    228          {
    229              
    230          } /* end UserAppSM_FailedInit() */
    231          
    232          
    233          /*--------------------------------------------------------------------------------------------------------------------*/
    234          /* End of File                                                                                                        */
    235          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   UserAppInitialize
        16   -> LCDCommand
        16   -> LCDMessage
        16   -> __aeabi_memcpy
       8   UserAppRunActiveState
         8   -- Indirect call
       8   UserAppSM_Idle
         8   -> ButtonAcknowledge
         8   -> LCDCommand
         8   -> LCDMessage
         8   -> WasButtonPressed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      12  ?_0
      12  ?_1
       2  ?_2
      16  ?_3
       2  ?_4
       2  ClockDownForBegin
       2  ClockDownForBeginning
       1  CountForBit
       4  G_u32UserAppFlags
       4  PointToPositionOfTheMloeWillBe
       8  PositionOfTheMloeWillBe
      36  UserAppInitialize
      10  UserAppRunActiveState
     316  UserAppSM_Idle
       4  UserApp_StateMachine
       1  flag

 
  12 bytes in section .bss
  14 bytes in section .data
  44 bytes in section .rodata
 406 bytes in section .text
 
 406 bytes of CODE  memory
  44 bytes of CONST memory
  26 bytes of DATA  memory

Errors: none
Warnings: 6
