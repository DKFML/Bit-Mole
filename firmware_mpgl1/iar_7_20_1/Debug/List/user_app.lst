###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        16/Jun/2016  13:23:19
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\DK\Desktop\Razor_Atmel-slave\Razor_Atmel-master\firmware_mpg_common\application\user_app.c
#    Command line =  
#        C:\Users\DK\Desktop\Razor_Atmel-slave\Razor_Atmel-master\firmware_mpg_common\application\user_app.c
#        -D MPGL1 -D MPG1 --preprocess=cl
#        C:\Users\DK\Desktop\Razor_Atmel-slave\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -lC
#        C:\Users\DK\Desktop\Razor_Atmel-slave\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -o
#        C:\Users\DK\Desktop\Razor_Atmel-slave\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\EIE课程设计-单片机\软件安装\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\DK\Desktop\Razor_Atmel-slave\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\
#        -I
#        C:\Users\DK\Desktop\Razor_Atmel-slave\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\bsp\
#        -I
#        C:\Users\DK\Desktop\Razor_Atmel-slave\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\drivers\
#        -I
#        C:\Users\DK\Desktop\Razor_Atmel-slave\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\application\
#        -I
#        C:\Users\DK\Desktop\Razor_Atmel-slave\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\
#        -I
#        C:\Users\DK\Desktop\Razor_Atmel-slave\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\application\
#        -I
#        C:\Users\DK\Desktop\Razor_Atmel-slave\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\cmsis\
#        -I
#        C:\Users\DK\Desktop\Razor_Atmel-slave\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\drivers\
#        -On --use_c++_inline -I
#        D:\EIE课程设计-单片机\软件安装\arm\CMSIS\Include\
#    List file    =  
#        C:\Users\DK\Desktop\Razor_Atmel-slave\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\Debug\List\user_app.lst
#    Object file  =  
#        C:\Users\DK\Desktop\Razor_Atmel-slave\Razor_Atmel-master\firmware_mpgl1\iar_7_20_1\Debug\Obj\user_app.o
#
###############################################################################

C:\Users\DK\Desktop\Razor_Atmel-slave\Razor_Atmel-master\firmware_mpg_common\application\user_app.c
      1          /**********************************************************************************************************************
      2          File: user_app.c                                                                
      3          
      4          ----------------------------------------------------------------------------------------------------------------------
      5          To start a new task using this user_app as a template:
      6           1. Copy both user_app.c and user_app.h to the Application directory
      7           2. Rename the files yournewtaskname.c and yournewtaskname.h
      8           3. Add yournewtaskname.c and yournewtaskname.h to the Application Include and Source groups in the IAR project
      9           4. Use ctrl-h (make sure "Match Case" is checked) to find and replace all instances of "user_app" with "yournewtaskname"
     10           5. Use ctrl-h to find and replace all instances of "UserApp" with "YourNewTaskName"
     11           6. Use ctrl-h to find and replace all instances of "USER_APP" with "YOUR_NEW_TASK_NAME"
     12           7. Add a call to YourNewTaskNameInitialize() in the init section of main
     13           8. Add a call to YourNewTaskNameRunActiveState() in the Super Loop section of main
     14           9. Update yournewtaskname.h per the instructions at the top of yournewtaskname.h
     15          10. Delete this text (between the dashed lines) and update the Description below to describe your task
     16          ----------------------------------------------------------------------------------------------------------------------
     17          
     18          Description:
     19          This is a user_app.c file template 
     20          
     21          ------------------------------------------------------------------------------------------------------------------------
     22          API:
     23          
     24          Public functions:
     25          
     26          
     27          Protected System functions:
     28          void UserAppInitialize(void)
     29          Runs required initialzation for the task.  Should only be called once in main init section.
     30          
     31          void UserAppRunActiveState(void)
     32          Runs current task state.  Should only be called once in main loop.
     33          
     34          
     35          **********************************************************************************************************************/
     36          
     37          #include "configuration.h"

  /**********************************************************************************************************************
                                                                                                                        ^
"C:\Users\DK\Desktop\Razor_Atmel-slave\Razor_Atmel-master\firmware_mpg_common\configuration.h",1  Warning[Pa050]: 
          non-native end of line sequence detected (this diagnostic is only
          issued once)
     38          
     39          /***********************************************************************************************************************
     40          Global variable definitions with scope across entire project.
     41          All Global variable names shall start with "G_"
     42          ***********************************************************************************************************************/
     43          /* New variables */

   \                                 In section .bss, align 4
     44          volatile u32 G_u32UserAppFlags;                       /* Global state flags */
   \                     G_u32UserAppFlags:
   \   00000000                      DS8 4
     45          
     46          
     47          /*--------------------------------------------------------------------------------------------------------------------*/
     48          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     49          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     50          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     51          
     52          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     53          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     54          
     55          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     56          extern AntSetupDataType G_stAntSetupData;                         /* From ant.c */
     57          
     58          extern u32 G_u32AntApiCurrentDataTimeStamp;                       /* From ant_api.c */
     59          extern AntApplicationMessageType G_eAntApiCurrentMessageClass;    /* From ant_api.c */
     60          extern u8 G_au8AntApiCurrentData[ANT_APPLICATION_MESSAGE_BYTES];  /* From ant_api.c */
     61          /***********************************************************************************************************************
     62          Global variable definitions with scope limited to this local application.
     63          Variable names shall start with "UserApp_" and be declared as static.
     64          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     65          static fnCode_type UserApp_StateMachine;            /* The state machine function pointer */
   \                     UserApp_StateMachine:
   \   00000000                      DS8 4
     66          static u32 UserApp_u32Timeout;                      /* Timeout counter used across states */
     67          
     68          static u32 UserApp_u32DataMsgCount = 0;   /* ANT_DATA packets received */
     69          static u32 UserApp_u32TickMsgCount = 0;   /* ANT_TICK packets received */
     70          /**********************************************************************************************************************
     71          Function Definitions
     72          **********************************************************************************************************************/
     73          
     74          /*--------------------------------------------------------------------------------------------------------------------*/
     75          /* Public functions                                                                                                   */
     76          /*--------------------------------------------------------------------------------------------------------------------*/
     77          
     78          
     79          /*--------------------------------------------------------------------------------------------------------------------*/
     80          /* Protected functions                                                                                                */
     81          /*--------------------------------------------------------------------------------------------------------------------*/
     82          
     83          /*--------------------------------------------------------------------------------------------------------------------
     84          Function: UserAppInitialize
     85          
     86          Description:
     87          Initializes the State Machine and its variables.
     88          
     89          Requires:
     90            -
     91          
     92          Promises:
     93            - 
     94          */

   \                                 In section .text, align 2, keep-with-next
     95          void UserAppInitialize(void)
     96          {
   \                     UserAppInitialize: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     97            /* Clear screen and place start messages */
     98            LCDCommand(LCD_CLEAR_CMD);
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      BL       LCDCommand
     99            LCDMessage(LINE1_START_ADDR, "Beat Mole !"); 
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable5
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      BL       LCDMessage
    100            LCDMessage(LINE2_START_ADDR, "Player2"); 
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   00000016   0x2040             MOVS     R0,#+64
   \   00000018   0x.... 0x....      BL       LCDMessage
    101          
    102            /* Start with LED0 in PURPLE state = channel is not configured */
    103            LedOn(PURPLE);
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      BL       LedOn
    104            
    105           /* Configure ANT for this application */
    106            G_stAntSetupData.AntChannel          = ANT_CHANNEL_USERAPP;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \   00000028   0x7008             STRB     R0,[R1, #+0]
    107            G_stAntSetupData.AntSerialLo         = ANT_SERIAL_LO_USERAPP;
   \   0000002A   0x20B3             MOVS     R0,#+179
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \   00000030   0x70C8             STRB     R0,[R1, #+3]
    108            G_stAntSetupData.AntSerialHi         = ANT_SERIAL_HI_USERAPP;
   \   00000032   0x2010             MOVS     R0,#+16
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \   00000038   0x7108             STRB     R0,[R1, #+4]
    109            G_stAntSetupData.AntDeviceType       = ANT_DEVICE_TYPE_USERAPP;
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \   00000040   0x7148             STRB     R0,[R1, #+5]
    110            G_stAntSetupData.AntTransmissionType = ANT_TRANSMISSION_TYPE_USERAPP;
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \   00000048   0x7188             STRB     R0,[R1, #+6]
    111            G_stAntSetupData.AntChannelPeriodLo  = ANT_CHANNEL_PERIOD_LO_USERAPP;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \   00000050   0x71C8             STRB     R0,[R1, #+7]
    112            G_stAntSetupData.AntChannelPeriodHi  = ANT_CHANNEL_PERIOD_HI_USERAPP;
   \   00000052   0x2020             MOVS     R0,#+32
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \   00000058   0x7208             STRB     R0,[R1, #+8]
    113            G_stAntSetupData.AntFrequency        = ANT_FREQUENCY_USERAPP;
   \   0000005A   0x2032             MOVS     R0,#+50
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \   00000060   0x7248             STRB     R0,[R1, #+9]
    114            G_stAntSetupData.AntTxPower          = ANT_TX_POWER_USERAPP;
   \   00000062   0x2003             MOVS     R0,#+3
   \   00000064   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \   00000068   0x7288             STRB     R0,[R1, #+10]
    115            
    116            /* If good initialization, set state to Idle */
    117            if( AntChannelConfig(ANT_SLAVE) )
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x.... 0x....      BL       AntChannelConfig
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD00D             BEQ.N    ??UserAppInitialize_0
    118            {
    119              /* Channel is configured, so change LED to yellow */
    120              LedOff(PURPLE);
   \   00000074   0x2001             MOVS     R0,#+1
   \   00000076   0x.... 0x....      BL       LedOff
    121              LedOn(YELLOW);
   \   0000007A   0x2005             MOVS     R0,#+5
   \   0000007C   0x.... 0x....      BL       LedOn
    122              AntOpenChannel();
   \   00000080   0x.... 0x....      BL       AntOpenChannel
    123              UserApp_StateMachine = UserAppSM_Idle;
   \   00000084   0x.... 0x....      ADR.W    R0,UserAppSM_Idle
   \   00000088   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   0000008C   0x6008             STR      R0,[R1, #+0]
   \   0000008E   0xE008             B.N      ??UserAppInitialize_1
    124            }
    125            else
    126            {
    127              /* The task isn't properly initialized, so shut it down and don't run */
    128              LedBlink(RED, LED_4HZ);
   \                     ??UserAppInitialize_0: (+1)
   \   00000090   0x217D             MOVS     R1,#+125
   \   00000092   0x2007             MOVS     R0,#+7
   \   00000094   0x.... 0x....      BL       LedBlink
    129              UserApp_StateMachine = UserAppSM_Error;
   \   00000098   0x.... 0x....      ADR.W    R0,UserAppSM_Error
   \   0000009C   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   000000A0   0x6008             STR      R0,[R1, #+0]
    130            }
    131            
    132          } /* end UserAppInitialize() */
   \                     ??UserAppInitialize_1: (+1)
   \   000000A2   0xBD01             POP      {R0,PC}          ;; return
    133          
    134          
    135          /*----------------------------------------------------------------------------------------------------------------------
    136          Function UserAppRunActiveState()
    137          
    138          Description:
    139          Selects and runs one iteration of the current state in the state machine.
    140          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    141          may take 1ms / n to execute.
    142          
    143          Requires:
    144            - State machine function pointer points at current state
    145          
    146          Promises:
    147            - Calls the function to pointed by the state machine function pointer
    148          */

   \                                 In section .text, align 2, keep-with-next
    149          void UserAppRunActiveState(void)
    150          {
   \                     UserAppRunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    151            UserApp_StateMachine();
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable5_3
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x4780             BLX      R0
    152          
    153          } /* end UserAppRunActiveState */
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    154          
    155          
    156          /*--------------------------------------------------------------------------------------------------------------------*/
    157          /* Private functions                                                                                                  */
    158          /*--------------------------------------------------------------------------------------------------------------------*/
    159          //Winner Music

   \                                 In section .text, align 2, keep-with-next
    160          static void WinnerMusic(void)
    161          {
   \                     WinnerMusic: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    162            static u8 u8notecounter = 0;
    163            static u16 u16buzzerrate[]  = {586,586,523,586,697,697,783,
    164            586,586,523,586,523,879,523,
    165            586,586,523,586,697,783,879,
    166            879,783,879,783,697,586,
    167            586,586,523,586,697,697,783,
    168            586,586,523,586,523,523,879,
    169            586,586,523,586,697,697,783,
    170            879,783,879,783,697,586,
    171            697,658,586,523,523,523,586,879,783,879,
    172            879,523,586,783,658,697,697,658,523,586,
    173            697,658,586,523,523,523,586,879,783,879,
    174            879,523,586,586,586,697,783,658,
    175            586,697,783,783,783,897,897,
    176            879,523,586,783,697,879,
    177            586,697,783,783,783,897,897,
    178            879,879,879,783,697,697,
    179            586,697,783,783,783,897,897,
    180            879,523,586,783,697,879,
    181            586,697,879,879,783,697,783,879,697,523,586,
    182            586,697,783,783,783,897,897,
    183            879,523,586,783,697,879,
    184            586,697,783,783,783,897,897,
    185            879,879,879,783,697,697,
    186            586,697,783,783,783,897,897,
    187            879,523,586,783,697,879,
    188            586,697,879,879,783,697,783,879,697,523,586,
    189            };
    190            static u16 u16counter = 0;
    191            
    192            u16counter++;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable5_4
   \   00000006   0x8800             LDRH     R0,[R0, #+0]
   \   00000008   0x1C40             ADDS     R0,R0,#+1
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable5_4
   \   0000000E   0x8008             STRH     R0,[R1, #+0]
    193            
    194            if(u16counter == 80)
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable5_4
   \   00000014   0x8800             LDRH     R0,[R0, #+0]
   \   00000016   0x2850             CMP      R0,#+80
   \   00000018   0xD120             BNE.N    ??WinnerMusic_0
    195            {
    196              u16counter=0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable5_4
   \   00000020   0x8008             STRH     R0,[R1, #+0]
    197              PWMAudioSetFrequency(BUZZER1, u16buzzerrate[u8notecounter]);
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable5_6
   \   0000002A   0x7809             LDRB     R1,[R1, #+0]
   \   0000002C   0xF830 0x1011      LDRH     R1,[R0, R1, LSL #+1]
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       PWMAudioSetFrequency
    198              PWMAudioOn(BUZZER1);
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x.... 0x....      BL       PWMAudioOn
    199              
    200              if(++u8notecounter == 192)
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable5_6
   \   00000040   0x7800             LDRB     R0,[R0, #+0]
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable5_6
   \   00000048   0x7008             STRB     R0,[R1, #+0]
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable5_6
   \   0000004E   0x7800             LDRB     R0,[R0, #+0]
   \   00000050   0x28C0             CMP      R0,#+192
   \   00000052   0xD103             BNE.N    ??WinnerMusic_0
    201              {
    202                u8notecounter=0;
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable5_6
   \   0000005A   0x7008             STRB     R0,[R1, #+0]
    203              }
    204            }
    205          } /* end winnerMusic() */
   \                     ??WinnerMusic_0: (+1)
   \   0000005C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 1
   \                     ??u8notecounter:
   \   00000000                      DS8 1

   \                                 In section .data, align 4
   \                     ??u16buzzerrate:
   \   00000000   0x024A 0x024A      DC16 586, 586, 523, 586, 697, 697, 783, 586, 586, 523, 586, 523, 879
   \              0x020B 0x024A
   \              0x02B9 0x02B9
   \              0x030F 0x024A
   \              0x024A 0x020B
   \              0x024A 0x020B
   \              0x036F       
   \   0000001A   0x020B 0x024A      DC16 523, 586, 586, 523, 586, 697, 783, 879, 879, 783, 879, 783, 697
   \              0x024A 0x020B
   \              0x024A 0x02B9
   \              0x030F 0x036F
   \              0x036F 0x030F
   \              0x036F 0x030F
   \              0x02B9       
   \   00000034   0x024A 0x024A      DC16 586, 586, 586, 523, 586, 697, 697, 783, 586, 586, 523, 586, 523
   \              0x024A 0x020B
   \              0x024A 0x02B9
   \              0x02B9 0x030F
   \              0x024A 0x024A
   \              0x020B 0x024A
   \              0x020B       
   \   0000004E   0x020B 0x036F      DC16 523, 879, 586, 586, 523, 586, 697, 697, 783, 879, 783, 879, 783
   \              0x024A 0x024A
   \              0x020B 0x024A
   \              0x02B9 0x02B9
   \              0x030F 0x036F
   \              0x030F 0x036F
   \              0x030F       
   \   00000068   0x02B9 0x024A      DC16 697, 586, 697, 658, 586, 523, 523, 523, 586, 879, 783, 879, 879
   \              0x02B9 0x0292
   \              0x024A 0x020B
   \              0x020B 0x020B
   \              0x024A 0x036F
   \              0x030F 0x036F
   \              0x036F       
   \   00000082   0x020B 0x024A      DC16 523, 586, 783, 658, 697, 697, 658, 523, 586, 697, 658, 586, 523
   \              0x030F 0x0292
   \              0x02B9 0x02B9
   \              0x0292 0x020B
   \              0x024A 0x02B9
   \              0x0292 0x024A
   \              0x020B       
   \   0000009C   0x020B 0x020B      DC16 523, 523, 586, 879, 783, 879, 879, 523, 586, 586, 586, 697, 783
   \              0x024A 0x036F
   \              0x030F 0x036F
   \              0x036F 0x020B
   \              0x024A 0x024A
   \              0x024A 0x02B9
   \              0x030F       
   \   000000B6   0x0292 0x024A      DC16 658, 586, 697, 783, 783, 783, 897, 897, 879, 523, 586, 783, 697
   \              0x02B9 0x030F
   \              0x030F 0x030F
   \              0x0381 0x0381
   \              0x036F 0x020B
   \              0x024A 0x030F
   \              0x02B9       
   \   000000D0   0x036F 0x024A      DC16 879, 586, 697, 783, 783, 783, 897, 897, 879, 879, 879, 783, 697
   \              0x02B9 0x030F
   \              0x030F 0x030F
   \              0x0381 0x0381
   \              0x036F 0x036F
   \              0x036F 0x030F
   \              0x02B9       
   \   000000EA   0x02B9 0x024A      DC16 697, 586, 697, 783, 783, 783, 897, 897, 879, 523, 586, 783, 697
   \              0x02B9 0x030F
   \              0x030F 0x030F
   \              0x0381 0x0381
   \              0x036F 0x020B
   \              0x024A 0x030F
   \              0x02B9       
   \   00000104   0x036F 0x024A      DC16 879, 586, 697, 879, 879, 783, 697, 783, 879, 697, 523, 586, 586
   \              0x02B9 0x036F
   \              0x036F 0x030F
   \              0x02B9 0x030F
   \              0x036F 0x02B9
   \              0x020B 0x024A
   \              0x024A       
   \   0000011E   0x02B9 0x030F      DC16 697, 783, 783, 783, 897, 897, 879, 523, 586, 783, 697, 879, 586
   \              0x030F 0x030F
   \              0x0381 0x0381
   \              0x036F 0x020B
   \              0x024A 0x030F
   \              0x02B9 0x036F
   \              0x024A       
   \   00000138   0x02B9 0x030F      DC16 697, 783, 783, 783, 897, 897, 879, 879, 879, 783, 697, 697, 586
   \              0x030F 0x030F
   \              0x0381 0x0381
   \              0x036F 0x036F
   \              0x036F 0x030F
   \              0x02B9 0x02B9
   \              0x024A       
   \   00000152   0x02B9 0x030F      DC16 697, 783, 783, 783, 897, 897, 879, 523, 586, 783, 697, 879, 586
   \              0x030F 0x030F
   \              0x0381 0x0381
   \              0x036F 0x020B
   \              0x024A 0x030F
   \              0x02B9 0x036F
   \              0x024A       
   \   0000016C   0x02B9 0x036F      DC16 697, 879, 879, 783, 697, 783, 879, 697, 523, 586
   \              0x036F 0x030F
   \              0x02B9 0x030F
   \              0x036F 0x02B9
   \              0x020B 0x024A

   \                                 In section .bss, align 2
   \                     ??u16counter:
   \   00000000                      DS8 2
    206          
    207          //Loser Music

   \                                 In section .text, align 2, keep-with-next
    208          static void LoserMusic(void)
    209          {
   \                     LoserMusic: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    210            static u8 u8notecounter = 0;
    211            static u16 u16buzzerrate[]  = {
    212            
    213            879,523,586,783,697,879,
    214            586,697,783,783,783,897,897,
    215            879,879,879,783,697,697,
    216            
    217            586,697,879,879,783,697,783,879,697,523,586,
    218            586,697,783,783,783,897,897,
    219            
    220            586,697,783,783,783,897,897,
    221            
    222            586,697,879,879,783,697,783,879,697,523,586,
    223            };
    224            static u16 u16counter = 0;
    225            
    226            u16counter++;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable5_7
   \   00000006   0x8800             LDRH     R0,[R0, #+0]
   \   00000008   0x1C40             ADDS     R0,R0,#+1
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \   0000000E   0x8008             STRH     R0,[R1, #+0]
    227            
    228            if(u16counter == 80)
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable5_7
   \   00000014   0x8800             LDRH     R0,[R0, #+0]
   \   00000016   0x2850             CMP      R0,#+80
   \   00000018   0xD120             BNE.N    ??LoserMusic_0
    229            {
    230              u16counter=0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \   00000020   0x8008             STRH     R0,[R1, #+0]
    231              PWMAudioSetFrequency(BUZZER1, u16buzzerrate[u8notecounter]);
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable5_8
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable5_9
   \   0000002A   0x7809             LDRB     R1,[R1, #+0]
   \   0000002C   0xF830 0x1011      LDRH     R1,[R0, R1, LSL #+1]
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       PWMAudioSetFrequency
    232              PWMAudioOn(BUZZER1);
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x.... 0x....      BL       PWMAudioOn
    233              
    234              if(++u8notecounter == 45)
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable5_9
   \   00000040   0x7800             LDRB     R0,[R0, #+0]
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable5_9
   \   00000048   0x7008             STRB     R0,[R1, #+0]
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable5_9
   \   0000004E   0x7800             LDRB     R0,[R0, #+0]
   \   00000050   0x282D             CMP      R0,#+45
   \   00000052   0xD103             BNE.N    ??LoserMusic_0
    235              {
    236                u8notecounter=0;
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable5_9
   \   0000005A   0x7008             STRB     R0,[R1, #+0]
    237              }
    238            }
    239          } /* end LoserMusic() */
   \                     ??LoserMusic_0: (+1)
   \   0000005C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 1
   \                     ??u8notecounter_1:
   \   00000000                      DS8 1

   \                                 In section .data, align 4
   \                     ??u16buzzerrate_1:
   \   00000000   0x036F 0x020B      DC16 879, 523, 586, 783, 697, 879, 586, 697, 783, 783, 783, 897, 897
   \              0x024A 0x030F
   \              0x02B9 0x036F
   \              0x024A 0x02B9
   \              0x030F 0x030F
   \              0x030F 0x0381
   \              0x0381       
   \   0000001A   0x036F 0x036F      DC16 879, 879, 879, 783, 697, 697, 586, 697, 879, 879, 783, 697, 783
   \              0x036F 0x030F
   \              0x02B9 0x02B9
   \              0x024A 0x02B9
   \              0x036F 0x036F
   \              0x030F 0x02B9
   \              0x030F       
   \   00000034   0x036F 0x02B9      DC16 879, 697, 523, 586, 586, 697, 783, 783, 783, 897, 897, 586, 697
   \              0x020B 0x024A
   \              0x024A 0x02B9
   \              0x030F 0x030F
   \              0x030F 0x0381
   \              0x0381 0x024A
   \              0x02B9       
   \   0000004E   0x030F 0x030F      DC16 783, 783, 783, 897, 897, 586, 697, 879, 879, 783, 697, 783, 879
   \              0x030F 0x0381
   \              0x0381 0x024A
   \              0x02B9 0x036F
   \              0x036F 0x030F
   \              0x02B9 0x030F
   \              0x036F       
   \   00000068   0x02B9 0x020B      DC16 697, 523, 586
   \              0x024A       
   \   0000006E   0x00 0x00          DC8 0, 0

   \                                 In section .bss, align 2
   \                     ??u16counter_1:
   \   00000000                      DS8 2
    240          //LED Flash

   \                                 In section .text, align 2, keep-with-next
    241          static void LedFlash(void)
    242          {
   \                     LedFlash: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    243            static u16 u16Count = 0;
    244            u16Count++;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable5_10
   \   00000006   0x8800             LDRH     R0,[R0, #+0]
   \   00000008   0x1C40             ADDS     R0,R0,#+1
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable5_10
   \   0000000E   0x8008             STRH     R0,[R1, #+0]
    245            static bool flag =0;
                                     ^
Warning[Pe188]: enumerated type mixed with another type
    246            if(u16Count == 500 && flag ==1)
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable5_10
   \   00000014   0x8800             LDRH     R0,[R0, #+0]
   \   00000016   0xF5B0 0x7FFA      CMP      R0,#+500
   \   0000001A   0xD12F             BNE.N    ??LedFlash_0
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable5_11
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x2801             CMP      R0,#+1
   \   00000024   0xD12A             BNE.N    ??LedFlash_0
    247            {
    248              flag = !flag;
                          ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable5_11
   \   0000002A   0x7800             LDRB     R0,[R0, #+0]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD104             BNE.N    ??LedFlash_1
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable5_11
   \   00000036   0x7008             STRB     R0,[R1, #+0]
   \   00000038   0xE003             B.N      ??LedFlash_2
   \                     ??LedFlash_1: (+1)
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable5_11
   \   00000040   0x7008             STRB     R0,[R1, #+0]
    249              u16Count = 0;
   \                     ??LedFlash_2: (+1)
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable5_10
   \   00000048   0x8008             STRH     R0,[R1, #+0]
    250              LedOn(WHITE);
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x.... 0x....      BL       LedOn
    251              LedOn(PURPLE);
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x.... 0x....      BL       LedOn
    252              LedOn(BLUE);
   \   00000056   0x2002             MOVS     R0,#+2
   \   00000058   0x.... 0x....      BL       LedOn
    253              LedOn(CYAN);
   \   0000005C   0x2003             MOVS     R0,#+3
   \   0000005E   0x.... 0x....      BL       LedOn
    254              LedOff(GREEN);
   \   00000062   0x2004             MOVS     R0,#+4
   \   00000064   0x.... 0x....      BL       LedOff
    255              LedOff(YELLOW);
   \   00000068   0x2005             MOVS     R0,#+5
   \   0000006A   0x.... 0x....      BL       LedOff
    256              LedOff(ORANGE);
   \   0000006E   0x2006             MOVS     R0,#+6
   \   00000070   0x.... 0x....      BL       LedOff
    257              LedOff(RED);
   \   00000074   0x2007             MOVS     R0,#+7
   \   00000076   0x.... 0x....      BL       LedOff
   \   0000007A   0xE034             B.N      ??LedFlash_3
    258            }
    259            else if(u16Count == 500 && flag ==0)
   \                     ??LedFlash_0: (+1)
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable5_10
   \   00000080   0x8800             LDRH     R0,[R0, #+0]
   \   00000082   0xF5B0 0x7FFA      CMP      R0,#+500
   \   00000086   0xD12E             BNE.N    ??LedFlash_3
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable5_11
   \   0000008C   0x7800             LDRB     R0,[R0, #+0]
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD129             BNE.N    ??LedFlash_3
    260            {
    261              flag = !flag;
                          ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable5_11
   \   00000096   0x7800             LDRB     R0,[R0, #+0]
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xD104             BNE.N    ??LedFlash_4
   \   0000009C   0x2001             MOVS     R0,#+1
   \   0000009E   0x.... 0x....      LDR.W    R1,??DataTable5_11
   \   000000A2   0x7008             STRB     R0,[R1, #+0]
   \   000000A4   0xE003             B.N      ??LedFlash_5
   \                     ??LedFlash_4: (+1)
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0x.... 0x....      LDR.W    R1,??DataTable5_11
   \   000000AC   0x7008             STRB     R0,[R1, #+0]
    262              u16Count = 0;
   \                     ??LedFlash_5: (+1)
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable5_10
   \   000000B4   0x8008             STRH     R0,[R1, #+0]
    263              LedOff(WHITE);
   \   000000B6   0x2000             MOVS     R0,#+0
   \   000000B8   0x.... 0x....      BL       LedOff
    264              LedOff(PURPLE);
   \   000000BC   0x2001             MOVS     R0,#+1
   \   000000BE   0x.... 0x....      BL       LedOff
    265              LedOff(BLUE);
   \   000000C2   0x2002             MOVS     R0,#+2
   \   000000C4   0x.... 0x....      BL       LedOff
    266              LedOff(CYAN);
   \   000000C8   0x2003             MOVS     R0,#+3
   \   000000CA   0x.... 0x....      BL       LedOff
    267              LedOn(GREEN);
   \   000000CE   0x2004             MOVS     R0,#+4
   \   000000D0   0x.... 0x....      BL       LedOn
    268              LedOn(YELLOW);
   \   000000D4   0x2005             MOVS     R0,#+5
   \   000000D6   0x.... 0x....      BL       LedOn
    269              LedOn(ORANGE);
   \   000000DA   0x2006             MOVS     R0,#+6
   \   000000DC   0x.... 0x....      BL       LedOn
    270              LedOn(RED);
   \   000000E0   0x2007             MOVS     R0,#+7
   \   000000E2   0x.... 0x....      BL       LedOn
    271            }
    272          }
   \                     ??LedFlash_3: (+1)
   \   000000E6   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 2
   \                     ??u16Count:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     ??flag:
   \   00000000                      DS8 1
    273          
    274          /**********************************************************************************************************************
    275          State Machine Function Definitions
    276          **********************************************************************************************************************/
    277          
    278          /*-------------------------------------------------------------------------------------------------------------------*/
    279          /* Wait for a message to be queued */

   \                                 In section .text, align 4, keep-with-next
    280          static void UserAppSM_Idle(void)
    281          {
   \                     UserAppSM_Idle: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    282            static u8 u8NextMole[]={0,6,13,19,19,13,6,0,
    283            13,19,6,0,13,13,13,19,
    284            19,0,0,6,19,13,0,6,19,
    285            13,19,19,19,19,13,13,0,
    286            13,19,19,0,0,6,6,6,
    287            0,0,6,6,0,6,13,19,6,
    288            0,0,6,13,13,13,19,6,
    289            0,19,13,13,6,6,13,13};
    290            static u8 *u8PointToNextMole=u8NextMole;
    291            static u8 u8CountForBit = 0;
    292            static u8 u8ClockDownForBegin[]="5";
    293            static u32 u32ClockDownForGame=0;
    294            static u16 u16ClockDownForBeginning=0;
    295            static u8 u8count=0;
    296            static u8 u8clockdown[3]="10";
    297            static bool flag = 0;
                                      ^
Warning[Pe188]: enumerated type mixed with another type
    298            static bool FlagForGame =0;
                                            ^
Warning[Pe188]: enumerated type mixed with another type
    299            static u8 u8tempfordisplay[3];
    300            static bool FlagW = 0;
                                       ^
Warning[Pe188]: enumerated type mixed with another type
    301            static bool FlagL = 0;
                                       ^
Warning[Pe188]: enumerated type mixed with another type
    302            static bool flagsend = 0;
                                          ^
Warning[Pe188]: enumerated type mixed with another type
    303            static u8 au8SendNumber[] = {0x41, 0x61, 0, 0, 0xA5, 0, 0, 0};
    304            static u8 au8Receive[] = "xxxxxxxxxxxxxxxx";
    305            static bool Flag_Button0 = 0;
                                              ^
Warning[Pe188]: enumerated type mixed with another type
    306            static bool Flag_Button1 = 0;
                                              ^
Warning[Pe188]: enumerated type mixed with another type
    307            static u8 u8LastState = 0xff;
    308            u8 u8return[]= {1,35,69,103,137,171,205,239};
   \   00000004   0xA803             ADD      R0,SP,#+12
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable5_12
   \   0000000A   0xC90C             LDM      R1!,{R2,R3}
   \   0000000C   0xC00C             STM      R0!,{R2,R3}
   \   0000000E   0x3908             SUBS     R1,R1,#+8
   \   00000010   0x3808             SUBS     R0,R0,#+8
    309            //AntQueueBroadcastMessage(u8return);
    310            
    311            //Game Part 
    312            if( FlagForGame == 1)
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable5_13
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x2801             CMP      R0,#+1
   \   0000001A   0xF040 0x8278      BNE.W    ??UserAppSM_Idle_0
    313            {
    314              u16ClockDownForBeginning++;
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable5_14
   \   00000022   0x8800             LDRH     R0,[R0, #+0]
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable5_14
   \   0000002A   0x8008             STRH     R0,[R1, #+0]
    315              if(u16ClockDownForBeginning == 8500)
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable5_14
   \   00000030   0x8800             LDRH     R0,[R0, #+0]
   \   00000032   0xF242 0x1134      MOVW     R1,#+8500
   \   00000036   0x4288             CMP      R0,R1
   \   00000038   0xD104             BNE.N    ??UserAppSM_Idle_1
    316              {
    317                u16ClockDownForBeginning = 8000;
   \   0000003A   0xF44F 0x50FA      MOV      R0,#+8000
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable5_14
   \   00000042   0x8008             STRH     R0,[R1, #+0]
    318              }
    319              u32ClockDownForGame++;
   \                     ??UserAppSM_Idle_1: (+1)
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable5_15
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0x1C40             ADDS     R0,R0,#+1
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable5_15
   \   00000050   0x6008             STR      R0,[R1, #+0]
    320              u8count++;
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable5_16
   \   00000056   0x7800             LDRB     R0,[R0, #+0]
   \   00000058   0x1C40             ADDS     R0,R0,#+1
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable5_16
   \   0000005E   0x7008             STRB     R0,[R1, #+0]
    321              //Clock Down For Beginning
    322              for(u8 i=1;i<8;i++)
   \   00000060   0x2001             MOVS     R0,#+1
   \                     ??UserAppSM_Idle_2: (+1)
   \   00000062   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   0x2808             CMP      R0,#+8
   \   00000066   0xDA58             BGE.N    ??UserAppSM_Idle_3
    323              {
    324                if(u16ClockDownForBeginning == 1000*i)
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable5_14
   \   0000006C   0x8809             LDRH     R1,[R1, #+0]
   \   0000006E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000070   0xF44F 0x727A      MOV      R2,#+1000
   \   00000074   0xFB02 0xF200      MUL      R2,R2,R0
   \   00000078   0x4291             CMP      R1,R2
   \   0000007A   0xD14C             BNE.N    ??UserAppSM_Idle_4
    325                {
    326                  LCDClearChars(LINE1_START_ADDR, 20);
   \   0000007C   0x2114             MOVS     R1,#+20
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x.... 0x....      BL       LCDClearChars
    327                    //LCDClearChars(LINE2_START_ADDR, 20);
    328                    LCDMessage(LINE1_START_ADDR, "Clock Down:  s");
   \   00000084   0x.... 0x....      LDR.W    R1,??DataTable5_17
   \   00000088   0x2000             MOVS     R0,#+0
   \   0000008A   0x.... 0x....      BL       LCDMessage
    329                    LCDMessage(LINE1_START_ADDR+12, u8ClockDownForBegin);
   \   0000008E   0x.... 0x....      LDR.W    R1,??DataTable5_18
   \   00000092   0x200C             MOVS     R0,#+12
   \   00000094   0x.... 0x....      BL       LCDMessage
    330                    LCDMessage(LINE2_START_ADDR, "Player2");
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   0000009C   0x2040             MOVS     R0,#+64
   \   0000009E   0x.... 0x....      BL       LCDMessage
    331                    u8ClockDownForBegin[0]--;
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable5_18
   \   000000A6   0x7800             LDRB     R0,[R0, #+0]
   \   000000A8   0x1E40             SUBS     R0,R0,#+1
   \   000000AA   0x.... 0x....      LDR.W    R1,??DataTable5_18
   \   000000AE   0x7008             STRB     R0,[R1, #+0]
    332                    if(u8ClockDownForBegin[0] < '/')
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable5_18
   \   000000B4   0x7800             LDRB     R0,[R0, #+0]
   \   000000B6   0x282F             CMP      R0,#+47
   \   000000B8   0xDA2C             BGE.N    ??UserAppSM_Idle_5
    333                    {
    334                      flag = 1;
                                  ^
Warning[Pe188]: enumerated type mixed with another type
   \   000000BA   0x2001             MOVS     R0,#+1
   \   000000BC   0x.... 0x....      LDR.W    R1,??DataTable5_19
   \   000000C0   0x7008             STRB     R0,[R1, #+0]
    335                      u32ClockDownForGame=0;
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0x.... 0x....      LDR.W    R1,??DataTable5_15
   \   000000C8   0x6008             STR      R0,[R1, #+0]
    336                      LCDCommand(LCD_CLEAR_CMD);
   \   000000CA   0x2001             MOVS     R0,#+1
   \   000000CC   0x.... 0x....      BL       LCDCommand
    337                      LCDMessage(LINE1_START_ADDR, "Player2 T:");
   \   000000D0   0x.... 0x....      LDR.W    R1,??DataTable5_20
   \   000000D4   0x2000             MOVS     R0,#+0
   \   000000D6   0x.... 0x....      BL       LCDMessage
    338                      LCDMessage(LINE1_START_ADDR+10,u8clockdown);
   \   000000DA   0x.... 0x....      LDR.W    R1,??DataTable5_21
   \   000000DE   0x200A             MOVS     R0,#+10
   \   000000E0   0x.... 0x....      BL       LCDMessage
    339                      u8clockdown[0]='0';
   \   000000E4   0x2030             MOVS     R0,#+48
   \   000000E6   0x.... 0x....      LDR.W    R1,??DataTable5_21
   \   000000EA   0x7008             STRB     R0,[R1, #+0]
    340                      u8clockdown[1]='9';
   \   000000EC   0x2039             MOVS     R0,#+57
   \   000000EE   0x.... 0x....      LDR.W    R1,??DataTable5_21
   \   000000F2   0x7048             STRB     R0,[R1, #+1]
    341                      u8clockdown[2]='\0';
   \   000000F4   0x2000             MOVS     R0,#+0
   \   000000F6   0x.... 0x....      LDR.W    R1,??DataTable5_21
   \   000000FA   0x7088             STRB     R0,[R1, #+2]
    342                      ButtonAcknowledge(BUTTON0);
   \   000000FC   0x2000             MOVS     R0,#+0
   \   000000FE   0x.... 0x....      BL       ButtonAcknowledge
    343                      ButtonAcknowledge(BUTTON1);
   \   00000102   0x2001             MOVS     R0,#+1
   \   00000104   0x.... 0x....      BL       ButtonAcknowledge
    344                      ButtonAcknowledge(BUTTON2);
   \   00000108   0x2002             MOVS     R0,#+2
   \   0000010A   0x.... 0x....      BL       ButtonAcknowledge
    345                      ButtonAcknowledge(BUTTON3);
   \   0000010E   0x2003             MOVS     R0,#+3
   \   00000110   0x.... 0x....      BL       ButtonAcknowledge
    346                    }
    347                  break;
   \                     ??UserAppSM_Idle_5: (+1)
   \   00000114   0xE001             B.N      ??UserAppSM_Idle_3
    348                }
    349              }
   \                     ??UserAppSM_Idle_4: (+1)
   \   00000116   0x1C40             ADDS     R0,R0,#+1
   \   00000118   0xE7A3             B.N      ??UserAppSM_Idle_2
    350              
    351              /*if(u16ClockDownForBeginning<8000 && (u16ClockDownForBeginning == 1000 ||
    352                                                   u16ClockDownForBeginning == 2000 ||
    353                                                   u16ClockDownForBeginning == 3000 ||
    354                                                   u16ClockDownForBeginning == 4000 ||
    355                                                   u16ClockDownForBeginning == 5000 ||
    356                                                   u16ClockDownForBeginning == 6000 ||
    357                                                   u16ClockDownForBeginning == 7000 ))
    358              {
    359                LCDClearChars(LINE1_START_ADDR, 20);
    360                //LCDClearChars(LINE2_START_ADDR, 20);
    361                LCDMessage(LINE1_START_ADDR, "Clock Down:  s");
    362                LCDMessage(LINE1_START_ADDR+12, u8ClockDownForBegin);
    363                u8ClockDownForBegin[0]--;
    364                if(u8ClockDownForBegin[0] < '/')
    365                {
    366                  flag = 1;
    367                  u32ClockDownForGame=0;
    368                  LCDCommand(LCD_CLEAR_CMD);
    369                  LCDMessage(LINE1_START_ADDR, "Player1 T:");
    370                  LCDMessage(LINE1_START_ADDR+10,u8clockdown);
    371                  u8clockdown[0]='0';
    372                  u8clockdown[1]='9';
    373                  u8clockdown[2]='\0';
    374                  ButtonAcknowledge(BUTTON0);
    375                  ButtonAcknowledge(BUTTON1);
    376                  ButtonAcknowledge(BUTTON2);
    377                  ButtonAcknowledge(BUTTON3);
    378                }
    379              }
    380              if(u16ClockDownForBeginning == 2000)
    381              {
    382                u16ClockDownForBeginning == 1500;
    383                flag = 1;
    384                u8clockdown[0]='0';
    385                  u8clockdown[1]='9';
    386                  u8clockdown[2]='\0';
    387              }*/
    388              
    389              //Game Start
    390              if(flag == 1&&u8count == 100)
   \                     ??UserAppSM_Idle_3: (+1)
   \   0000011A   0x.... 0x....      LDR.W    R0,??DataTable5_19
   \   0000011E   0x7800             LDRB     R0,[R0, #+0]
   \   00000120   0x2801             CMP      R0,#+1
   \   00000122   0xF040 0x8112      BNE.W    ??UserAppSM_Idle_6
   \   00000126   0x.... 0x....      LDR.W    R0,??DataTable5_16
   \   0000012A   0x7800             LDRB     R0,[R0, #+0]
   \   0000012C   0x2864             CMP      R0,#+100
   \   0000012E   0xF040 0x810C      BNE.W    ??UserAppSM_Idle_6
    391              {
    392                u8count = 0;
   \   00000132   0x2000             MOVS     R0,#+0
   \   00000134   0x.... 0x....      LDR.W    R1,??DataTable5_16
   \   00000138   0x7008             STRB     R0,[R1, #+0]
    393                LedOff(GREEN);
   \   0000013A   0x2004             MOVS     R0,#+4
   \   0000013C   0x.... 0x....      BL       LedOff
    394                LedOff(RED);
   \   00000140   0x2007             MOVS     R0,#+7
   \   00000142   0x.... 0x....      BL       LedOff
    395                LCDClearChars(LINE2_START_ADDR, 20);
   \   00000146   0x2114             MOVS     R1,#+20
   \   00000148   0x2040             MOVS     R0,#+64
   \   0000014A   0x.... 0x....      BL       LCDClearChars
    396                u8 u8Mole[]={'M','\0'};
                          ^
Warning[Pe177]: variable "u8Mole" was declared but never referenced
   \   0000014E   0x.... 0x....      LDR.W    R0,??DataTable5_22
   \   00000152   0x8800             LDRH     R0,[R0, #+0]
   \   00000154   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    397                LCDMessage(LINE2_START_ADDR+*u8PointToNextMole, "M");
   \   00000158   0xA1B4             ADR.N    R1,??UserAppSM_Idle_7  ;; "M"
   \   0000015A   0x.... 0x....      LDR.W    R0,??DataTable5_23
   \   0000015E   0x6800             LDR      R0,[R0, #+0]
   \   00000160   0x7800             LDRB     R0,[R0, #+0]
   \   00000162   0x3040             ADDS     R0,R0,#+64
   \   00000164   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000166   0x.... 0x....      BL       LCDMessage
    398                if(WasButtonPressed(BUTTON0))
   \   0000016A   0x2000             MOVS     R0,#+0
   \   0000016C   0x.... 0x....      BL       WasButtonPressed
   \   00000170   0x2800             CMP      R0,#+0
   \   00000172   0xD036             BEQ.N    ??UserAppSM_Idle_8
    399                {
    400                   ButtonAcknowledge(BUTTON0);
   \   00000174   0x2000             MOVS     R0,#+0
   \   00000176   0x.... 0x....      BL       ButtonAcknowledge
    401                   if(*u8PointToNextMole == 0)
   \   0000017A   0x.... 0x....      LDR.W    R0,??DataTable5_23
   \   0000017E   0x6800             LDR      R0,[R0, #+0]
   \   00000180   0x7800             LDRB     R0,[R0, #+0]
   \   00000182   0x2800             CMP      R0,#+0
   \   00000184   0xD11F             BNE.N    ??UserAppSM_Idle_9
    402                   {
    403                     u8CountForBit++;
   \   00000186   0x.... 0x....      LDR.W    R0,??DataTable5_24
   \   0000018A   0x7800             LDRB     R0,[R0, #+0]
   \   0000018C   0x1C40             ADDS     R0,R0,#+1
   \   0000018E   0x.... 0x....      LDR.W    R1,??DataTable5_24
   \   00000192   0x7008             STRB     R0,[R1, #+0]
    404                     LedOn(GREEN);
   \   00000194   0x2004             MOVS     R0,#+4
   \   00000196   0x.... 0x....      BL       LedOn
    405                     NumberToAscii(u8CountForBit,u8tempfordisplay);
   \   0000019A   0x.... 0x....      LDR.W    R1,??DataTable5_25
   \   0000019E   0x.... 0x....      LDR.W    R0,??DataTable5_24
   \   000001A2   0x7800             LDRB     R0,[R0, #+0]
   \   000001A4   0x.... 0x....      BL       NumberToAscii
    406                     LCDClearChars(LINE1_START_ADDR+19,2);
   \   000001A8   0x2102             MOVS     R1,#+2
   \   000001AA   0x2013             MOVS     R0,#+19
   \   000001AC   0x.... 0x....      BL       LCDClearChars
    407                     LCDMessage(LINE1_START_ADDR+14,"Num:");
   \   000001B0   0x.... 0x....      LDR.W    R1,??DataTable5_26
   \   000001B4   0x200E             MOVS     R0,#+14
   \   000001B6   0x.... 0x....      BL       LCDMessage
    408                     LCDMessage(LINE1_START_ADDR+18,u8tempfordisplay);
   \   000001BA   0x.... 0x....      LDR.W    R1,??DataTable5_25
   \   000001BE   0x2012             MOVS     R0,#+18
   \   000001C0   0x.... 0x....      BL       LCDMessage
   \   000001C4   0xE002             B.N      ??UserAppSM_Idle_10
    409                   }
    410                   else
    411                   {
    412                     LedOn(RED);
   \                     ??UserAppSM_Idle_9: (+1)
   \   000001C6   0x2007             MOVS     R0,#+7
   \   000001C8   0x.... 0x....      BL       LedOn
    413                   }
    414                   LCDClearChars(LINE2_START_ADDR,20);
   \                     ??UserAppSM_Idle_10: (+1)
   \   000001CC   0x2114             MOVS     R1,#+20
   \   000001CE   0x2040             MOVS     R0,#+64
   \   000001D0   0x.... 0x....      BL       LCDClearChars
    415                   
    416                   u8PointToNextMole++;
   \   000001D4   0x.... 0x....      LDR.W    R0,??DataTable5_23
   \   000001D8   0x6800             LDR      R0,[R0, #+0]
   \   000001DA   0x1C40             ADDS     R0,R0,#+1
   \   000001DC   0x.... 0x....      LDR.W    R1,??DataTable5_23
   \   000001E0   0x6008             STR      R0,[R1, #+0]
    417                }
    418                if(WasButtonPressed(BUTTON1))
   \                     ??UserAppSM_Idle_8: (+1)
   \   000001E2   0x2001             MOVS     R0,#+1
   \   000001E4   0x.... 0x....      BL       WasButtonPressed
   \   000001E8   0x2800             CMP      R0,#+0
   \   000001EA   0xD036             BEQ.N    ??UserAppSM_Idle_11
    419                {
    420                   ButtonAcknowledge(BUTTON1);
   \   000001EC   0x2001             MOVS     R0,#+1
   \   000001EE   0x.... 0x....      BL       ButtonAcknowledge
    421                   if(*u8PointToNextMole == 6)
   \   000001F2   0x.... 0x....      LDR.W    R0,??DataTable5_23
   \   000001F6   0x6800             LDR      R0,[R0, #+0]
   \   000001F8   0x7800             LDRB     R0,[R0, #+0]
   \   000001FA   0x2806             CMP      R0,#+6
   \   000001FC   0xD11F             BNE.N    ??UserAppSM_Idle_12
    422                   {
    423                     u8CountForBit++;
   \   000001FE   0x.... 0x....      LDR.W    R0,??DataTable5_24
   \   00000202   0x7800             LDRB     R0,[R0, #+0]
   \   00000204   0x1C40             ADDS     R0,R0,#+1
   \   00000206   0x.... 0x....      LDR.W    R1,??DataTable5_24
   \   0000020A   0x7008             STRB     R0,[R1, #+0]
    424                     LedOn(GREEN);
   \   0000020C   0x2004             MOVS     R0,#+4
   \   0000020E   0x.... 0x....      BL       LedOn
    425                     NumberToAscii(u8CountForBit,u8tempfordisplay);
   \   00000212   0x.... 0x....      LDR.W    R1,??DataTable5_25
   \   00000216   0x.... 0x....      LDR.W    R0,??DataTable5_24
   \   0000021A   0x7800             LDRB     R0,[R0, #+0]
   \   0000021C   0x.... 0x....      BL       NumberToAscii
    426                     LCDClearChars(LINE1_START_ADDR+19,2);
   \   00000220   0x2102             MOVS     R1,#+2
   \   00000222   0x2013             MOVS     R0,#+19
   \   00000224   0x.... 0x....      BL       LCDClearChars
    427                     LCDMessage(LINE1_START_ADDR+14,"Num:");
   \   00000228   0x.... 0x....      LDR.W    R1,??DataTable5_26
   \   0000022C   0x200E             MOVS     R0,#+14
   \   0000022E   0x.... 0x....      BL       LCDMessage
    428                     LCDMessage(LINE1_START_ADDR+18,u8tempfordisplay);
   \   00000232   0x.... 0x....      LDR.W    R1,??DataTable5_25
   \   00000236   0x2012             MOVS     R0,#+18
   \   00000238   0x.... 0x....      BL       LCDMessage
   \   0000023C   0xE002             B.N      ??UserAppSM_Idle_13
    429                   }
    430                   else
    431                   {
    432                     LedOn(RED);
   \                     ??UserAppSM_Idle_12: (+1)
   \   0000023E   0x2007             MOVS     R0,#+7
   \   00000240   0x.... 0x....      BL       LedOn
    433                   }
    434                   LCDClearChars(LINE2_START_ADDR,20);
   \                     ??UserAppSM_Idle_13: (+1)
   \   00000244   0x2114             MOVS     R1,#+20
   \   00000246   0x2040             MOVS     R0,#+64
   \   00000248   0x.... 0x....      BL       LCDClearChars
    435                   
    436                   u8PointToNextMole++;
   \   0000024C   0x.... 0x....      LDR.W    R0,??DataTable5_23
   \   00000250   0x6800             LDR      R0,[R0, #+0]
   \   00000252   0x1C40             ADDS     R0,R0,#+1
   \   00000254   0x.... 0x....      LDR.W    R1,??DataTable5_23
   \   00000258   0x6008             STR      R0,[R1, #+0]
    437                }
    438                if(WasButtonPressed(BUTTON2))
   \                     ??UserAppSM_Idle_11: (+1)
   \   0000025A   0x2002             MOVS     R0,#+2
   \   0000025C   0x.... 0x....      BL       WasButtonPressed
   \   00000260   0x2800             CMP      R0,#+0
   \   00000262   0xD036             BEQ.N    ??UserAppSM_Idle_14
    439                {
    440                   ButtonAcknowledge(BUTTON2);
   \   00000264   0x2002             MOVS     R0,#+2
   \   00000266   0x.... 0x....      BL       ButtonAcknowledge
    441                   if(*u8PointToNextMole == 13)
   \   0000026A   0x.... 0x....      LDR.W    R0,??DataTable5_23
   \   0000026E   0x6800             LDR      R0,[R0, #+0]
   \   00000270   0x7800             LDRB     R0,[R0, #+0]
   \   00000272   0x280D             CMP      R0,#+13
   \   00000274   0xD11F             BNE.N    ??UserAppSM_Idle_15
    442                   {
    443                     u8CountForBit++;
   \   00000276   0x.... 0x....      LDR.W    R0,??DataTable5_24
   \   0000027A   0x7800             LDRB     R0,[R0, #+0]
   \   0000027C   0x1C40             ADDS     R0,R0,#+1
   \   0000027E   0x.... 0x....      LDR.W    R1,??DataTable5_24
   \   00000282   0x7008             STRB     R0,[R1, #+0]
    444                     LedOn(GREEN);
   \   00000284   0x2004             MOVS     R0,#+4
   \   00000286   0x.... 0x....      BL       LedOn
    445                     NumberToAscii(u8CountForBit,u8tempfordisplay);
   \   0000028A   0x.... 0x....      LDR.W    R1,??DataTable5_25
   \   0000028E   0x.... 0x....      LDR.W    R0,??DataTable5_24
   \   00000292   0x7800             LDRB     R0,[R0, #+0]
   \   00000294   0x.... 0x....      BL       NumberToAscii
    446                     LCDClearChars(LINE1_START_ADDR+19,2);
   \   00000298   0x2102             MOVS     R1,#+2
   \   0000029A   0x2013             MOVS     R0,#+19
   \   0000029C   0x.... 0x....      BL       LCDClearChars
    447                     LCDMessage(LINE1_START_ADDR+14,"Num:");
   \   000002A0   0x.... 0x....      LDR.W    R1,??DataTable5_26
   \   000002A4   0x200E             MOVS     R0,#+14
   \   000002A6   0x.... 0x....      BL       LCDMessage
    448                     LCDMessage(LINE1_START_ADDR+18,u8tempfordisplay);
   \   000002AA   0x.... 0x....      LDR.W    R1,??DataTable5_25
   \   000002AE   0x2012             MOVS     R0,#+18
   \   000002B0   0x.... 0x....      BL       LCDMessage
   \   000002B4   0xE002             B.N      ??UserAppSM_Idle_16
    449                   }
    450                   else
    451                   {
    452                     LedOn(RED);
   \                     ??UserAppSM_Idle_15: (+1)
   \   000002B6   0x2007             MOVS     R0,#+7
   \   000002B8   0x.... 0x....      BL       LedOn
    453                   }
    454                   LCDClearChars(LINE2_START_ADDR,20);
   \                     ??UserAppSM_Idle_16: (+1)
   \   000002BC   0x2114             MOVS     R1,#+20
   \   000002BE   0x2040             MOVS     R0,#+64
   \   000002C0   0x.... 0x....      BL       LCDClearChars
    455                   
    456                   u8PointToNextMole++;
   \   000002C4   0x.... 0x....      LDR.W    R0,??DataTable5_23
   \   000002C8   0x6800             LDR      R0,[R0, #+0]
   \   000002CA   0x1C40             ADDS     R0,R0,#+1
   \   000002CC   0x.... 0x....      LDR.W    R1,??DataTable5_23
   \   000002D0   0x6008             STR      R0,[R1, #+0]
    457                }
    458                if(WasButtonPressed(BUTTON3))
   \                     ??UserAppSM_Idle_14: (+1)
   \   000002D2   0x2003             MOVS     R0,#+3
   \   000002D4   0x.... 0x....      BL       WasButtonPressed
   \   000002D8   0x2800             CMP      R0,#+0
   \   000002DA   0xD036             BEQ.N    ??UserAppSM_Idle_6
    459                {
    460                   ButtonAcknowledge(BUTTON3);
   \   000002DC   0x2003             MOVS     R0,#+3
   \   000002DE   0x.... 0x....      BL       ButtonAcknowledge
    461                   if(*u8PointToNextMole == 19)
   \   000002E2   0x.... 0x....      LDR.W    R0,??DataTable5_23
   \   000002E6   0x6800             LDR      R0,[R0, #+0]
   \   000002E8   0x7800             LDRB     R0,[R0, #+0]
   \   000002EA   0x2813             CMP      R0,#+19
   \   000002EC   0xD11F             BNE.N    ??UserAppSM_Idle_17
    462                   {
    463                     u8CountForBit++;
   \   000002EE   0x.... 0x....      LDR.W    R0,??DataTable5_24
   \   000002F2   0x7800             LDRB     R0,[R0, #+0]
   \   000002F4   0x1C40             ADDS     R0,R0,#+1
   \   000002F6   0x.... 0x....      LDR.W    R1,??DataTable5_24
   \   000002FA   0x7008             STRB     R0,[R1, #+0]
    464                     LedOn(GREEN);
   \   000002FC   0x2004             MOVS     R0,#+4
   \   000002FE   0x.... 0x....      BL       LedOn
    465                     NumberToAscii(u8CountForBit,u8tempfordisplay);
   \   00000302   0x.... 0x....      LDR.W    R1,??DataTable5_25
   \   00000306   0x.... 0x....      LDR.W    R0,??DataTable5_24
   \   0000030A   0x7800             LDRB     R0,[R0, #+0]
   \   0000030C   0x.... 0x....      BL       NumberToAscii
    466                     LCDClearChars(LINE1_START_ADDR+19,2);
   \   00000310   0x2102             MOVS     R1,#+2
   \   00000312   0x2013             MOVS     R0,#+19
   \   00000314   0x.... 0x....      BL       LCDClearChars
    467                     LCDMessage(LINE1_START_ADDR+14,"Num:");
   \   00000318   0x.... 0x....      LDR.W    R1,??DataTable5_26
   \   0000031C   0x200E             MOVS     R0,#+14
   \   0000031E   0x.... 0x....      BL       LCDMessage
    468                     LCDMessage(LINE1_START_ADDR+18,u8tempfordisplay);
   \   00000322   0x.... 0x....      LDR.W    R1,??DataTable5_25
   \   00000326   0x2012             MOVS     R0,#+18
   \   00000328   0x.... 0x....      BL       LCDMessage
   \   0000032C   0xE002             B.N      ??UserAppSM_Idle_18
    469                   }
    470                   else
    471                   {
    472                     LedOn(RED);
   \                     ??UserAppSM_Idle_17: (+1)
   \   0000032E   0x2007             MOVS     R0,#+7
   \   00000330   0x.... 0x....      BL       LedOn
    473                   }
    474                   LCDClearChars(LINE2_START_ADDR,20);
   \                     ??UserAppSM_Idle_18: (+1)
   \   00000334   0x2114             MOVS     R1,#+20
   \   00000336   0x2040             MOVS     R0,#+64
   \   00000338   0x.... 0x....      BL       LCDClearChars
    475                   
    476                   u8PointToNextMole++;
   \   0000033C   0x.... 0x....      LDR.W    R0,??DataTable5_23
   \   00000340   0x6800             LDR      R0,[R0, #+0]
   \   00000342   0x1C40             ADDS     R0,R0,#+1
   \   00000344   0x.... 0x....      LDR.W    R1,??DataTable5_23
   \   00000348   0x6008             STR      R0,[R1, #+0]
    477                }
    478                
    479                
    480                
    481              }
    482             
    483              //Game Clock Down &&u8count == 50
    484              for(u8 i=1;i<11;i++)
   \                     ??UserAppSM_Idle_6: (+1)
   \   0000034A   0x2001             MOVS     R0,#+1
   \                     ??UserAppSM_Idle_19: (+1)
   \   0000034C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000034E   0x280B             CMP      R0,#+11
   \   00000350   0xDA1C             BGE.N    ??UserAppSM_Idle_20
    485              {
    486                if(u32ClockDownForGame == 1000*i)
   \   00000352   0x....             LDR.N    R1,??DataTable5_15
   \   00000354   0x6809             LDR      R1,[R1, #+0]
   \   00000356   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000358   0xF44F 0x727A      MOV      R2,#+1000
   \   0000035C   0xFB02 0xF200      MUL      R2,R2,R0
   \   00000360   0x4291             CMP      R1,R2
   \   00000362   0xD111             BNE.N    ??UserAppSM_Idle_21
    487                {
    488                  if(flag == 1)
   \   00000364   0x....             LDR.N    R0,??DataTable5_19
   \   00000366   0x7800             LDRB     R0,[R0, #+0]
   \   00000368   0x2801             CMP      R0,#+1
   \   0000036A   0xD10C             BNE.N    ??UserAppSM_Idle_22
    489                  {
    490                    LCDClearChars(LINE1_START_ADDR+10,4);
   \   0000036C   0x2104             MOVS     R1,#+4
   \   0000036E   0x200A             MOVS     R0,#+10
   \   00000370   0x.... 0x....      BL       LCDClearChars
    491                    LCDMessage(LINE1_START_ADDR+10,u8clockdown);
   \   00000374   0x....             LDR.N    R1,??DataTable5_21
   \   00000376   0x200A             MOVS     R0,#+10
   \   00000378   0x.... 0x....      BL       LCDMessage
    492                    u8clockdown[1]=u8clockdown[1]-1;
   \   0000037C   0x....             LDR.N    R0,??DataTable5_21
   \   0000037E   0x7840             LDRB     R0,[R0, #+1]
   \   00000380   0x1E40             SUBS     R0,R0,#+1
   \   00000382   0x....             LDR.N    R1,??DataTable5_21
   \   00000384   0x7048             STRB     R0,[R1, #+1]
    493                  }
    494                  break;
   \                     ??UserAppSM_Idle_22: (+1)
   \   00000386   0xE001             B.N      ??UserAppSM_Idle_20
    495                }
    496              }
   \                     ??UserAppSM_Idle_21: (+1)
   \   00000388   0x1C40             ADDS     R0,R0,#+1
   \   0000038A   0xE7DF             B.N      ??UserAppSM_Idle_19
    497              
    498              //Game End
    499              if(u32ClockDownForGame == 10000)
   \                     ??UserAppSM_Idle_20: (+1)
   \   0000038C   0x....             LDR.N    R0,??DataTable5_15
   \   0000038E   0x6800             LDR      R0,[R0, #+0]
   \   00000390   0xF242 0x7110      MOVW     R1,#+10000
   \   00000394   0x4288             CMP      R0,R1
   \   00000396   0xD116             BNE.N    ??UserAppSM_Idle_23
    500              {
    501                flag = 0;
                            ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000398   0x2000             MOVS     R0,#+0
   \   0000039A   0x....             LDR.N    R1,??DataTable5_19
   \   0000039C   0x7008             STRB     R0,[R1, #+0]
    502                LCDClearChars(LINE2_START_ADDR, 20);
   \   0000039E   0x2114             MOVS     R1,#+20
   \   000003A0   0x2040             MOVS     R0,#+64
   \   000003A2   0x.... 0x....      BL       LCDClearChars
    503                LCDMessage(LINE2_START_ADDR, "TIME OUT!");
   \   000003A6   0x....             LDR.N    R1,??DataTable5_27
   \   000003A8   0x2040             MOVS     R0,#+64
   \   000003AA   0x.... 0x....      BL       LCDMessage
    504                LedOff(GREEN);
   \   000003AE   0x2004             MOVS     R0,#+4
   \   000003B0   0x.... 0x....      BL       LedOff
    505                LedOff(RED);
   \   000003B4   0x2007             MOVS     R0,#+7
   \   000003B6   0x.... 0x....      BL       LedOff
    506                LedOff(BLUE);
   \   000003BA   0x2002             MOVS     R0,#+2
   \   000003BC   0x.... 0x....      BL       LedOff
    507                /*AntCloseChannel();*/
    508                LedOn(YELLOW);
   \   000003C0   0x2005             MOVS     R0,#+5
   \   000003C2   0x.... 0x....      BL       LedOn
    509              }
    510              if(u32ClockDownForGame > 11500)
   \                     ??UserAppSM_Idle_23: (+1)
   \   000003C6   0x....             LDR.N    R0,??DataTable5_15
   \   000003C8   0x6800             LDR      R0,[R0, #+0]
   \   000003CA   0xF642 0x41ED      MOVW     R1,#+11501
   \   000003CE   0x4288             CMP      R0,R1
   \   000003D0   0xD336             BCC.N    ??UserAppSM_Idle_24
    511              {
    512                u32ClockDownForGame = 10150;
   \   000003D2   0xF242 0x70A6      MOVW     R0,#+10150
   \   000003D6   0x....             LDR.N    R1,??DataTable5_15
   \   000003D8   0x6008             STR      R0,[R1, #+0]
    513                if(u8CountForBit > (au8Receive[0]-48)*16+au8Receive[1]-48)
   \   000003DA   0x....             LDR.N    R0,??DataTable5_28
   \   000003DC   0x7800             LDRB     R0,[R0, #+0]
   \   000003DE   0x....             LDR.N    R1,??DataTable5_28
   \   000003E0   0x7849             LDRB     R1,[R1, #+1]
   \   000003E2   0xEB11 0x1000      ADDS     R0,R1,R0, LSL #+4
   \   000003E6   0xF5B0 0x704C      SUBS     R0,R0,#+816
   \   000003EA   0x....             LDR.N    R1,??DataTable5_24
   \   000003EC   0x7809             LDRB     R1,[R1, #+0]
   \   000003EE   0x4288             CMP      R0,R1
   \   000003F0   0xDA07             BGE.N    ??UserAppSM_Idle_25
    514                {
    515                  LCDMessage(LINE1_START_ADDR, "You are the winner !");
   \   000003F2   0x....             LDR.N    R1,??DataTable5_29
   \   000003F4   0x2000             MOVS     R0,#+0
   \   000003F6   0x.... 0x....      BL       LCDMessage
    516                  FlagW = 1;
                               ^
Warning[Pe188]: enumerated type mixed with another type
   \   000003FA   0x2001             MOVS     R0,#+1
   \   000003FC   0x....             LDR.N    R1,??DataTable5_30
   \   000003FE   0x7008             STRB     R0,[R1, #+0]
   \   00000400   0xE01A             B.N      ??UserAppSM_Idle_26
    517                }
    518                else if(u8CountForBit < (au8Receive[0]-48)*16+au8Receive[1]-48)
   \                     ??UserAppSM_Idle_25: (+1)
   \   00000402   0x....             LDR.N    R0,??DataTable5_24
   \   00000404   0x7800             LDRB     R0,[R0, #+0]
   \   00000406   0x....             LDR.N    R1,??DataTable5_28
   \   00000408   0x7809             LDRB     R1,[R1, #+0]
   \   0000040A   0x....             LDR.N    R2,??DataTable5_28
   \   0000040C   0x7852             LDRB     R2,[R2, #+1]
   \   0000040E   0xEB12 0x1101      ADDS     R1,R2,R1, LSL #+4
   \   00000412   0xF5B1 0x714C      SUBS     R1,R1,#+816
   \   00000416   0x4288             CMP      R0,R1
   \   00000418   0xDA0A             BGE.N    ??UserAppSM_Idle_27
    519                {
    520                  LCDMessage(LINE1_START_ADDR, "You are the loser ! ");
   \   0000041A   0x....             LDR.N    R1,??DataTable5_31
   \   0000041C   0x2000             MOVS     R0,#+0
   \   0000041E   0x.... 0x....      BL       LCDMessage
    521                  FlagL = 1;
                               ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000422   0x2001             MOVS     R0,#+1
   \   00000424   0x....             LDR.N    R1,??DataTable5_32
   \   00000426   0x7008             STRB     R0,[R1, #+0]
   \   00000428   0xE006             B.N      ??UserAppSM_Idle_26
   \   0000042A   0xBF00             Nop      
   \                     ??UserAppSM_Idle_7:
   \   0000042C   0x4D 0x00          DC8      "M",0x0,0x0
   \              0x00 0x00    
    522                }
    523                else
    524                {
    525                  LCDMessage(LINE1_START_ADDR, "Draw!               ");
   \                     ??UserAppSM_Idle_27: (+1)
   \   00000430   0x....             LDR.N    R1,??DataTable5_33
   \   00000432   0x2000             MOVS     R0,#+0
   \   00000434   0x.... 0x....      BL       LCDMessage
    526                }
    527                LCDMessage(LINE2_START_ADDR, "Try again by B0      ");
   \                     ??UserAppSM_Idle_26: (+1)
   \   00000438   0x....             LDR.N    R1,??DataTable5_34
   \   0000043A   0x2040             MOVS     R0,#+64
   \   0000043C   0x.... 0x....      BL       LCDMessage
    528              }
    529              //Game Again
    530              if(WasButtonPressed(BUTTON0)&&flag==0)
   \                     ??UserAppSM_Idle_24: (+1)
   \   00000440   0x2000             MOVS     R0,#+0
   \   00000442   0x.... 0x....      BL       WasButtonPressed
   \   00000446   0x2800             CMP      R0,#+0
   \   00000448   0xD051             BEQ.N    ??UserAppSM_Idle_28
   \   0000044A   0x....             LDR.N    R0,??DataTable5_19
   \   0000044C   0x7800             LDRB     R0,[R0, #+0]
   \   0000044E   0x2800             CMP      R0,#+0
   \   00000450   0xD14D             BNE.N    ??UserAppSM_Idle_28
    531                {
    532                  ButtonAcknowledge(BUTTON0);
   \   00000452   0x2000             MOVS     R0,#+0
   \   00000454   0x.... 0x....      BL       ButtonAcknowledge
    533                  LCDCommand(LCD_CLEAR_CMD);
   \   00000458   0x2001             MOVS     R0,#+1
   \   0000045A   0x.... 0x....      BL       LCDCommand
    534                  u8PointToNextMole=u8NextMole;
   \   0000045E   0x....             LDR.N    R0,??DataTable5_35
   \   00000460   0x....             LDR.N    R1,??DataTable5_23
   \   00000462   0x6008             STR      R0,[R1, #+0]
    535                  u32ClockDownForGame = 0;
   \   00000464   0x2000             MOVS     R0,#+0
   \   00000466   0x....             LDR.N    R1,??DataTable5_15
   \   00000468   0x6008             STR      R0,[R1, #+0]
    536                  u16ClockDownForBeginning = 0;
   \   0000046A   0x2000             MOVS     R0,#+0
   \   0000046C   0x....             LDR.N    R1,??DataTable5_14
   \   0000046E   0x8008             STRH     R0,[R1, #+0]
    537                  u8ClockDownForBegin[0]='5';
   \   00000470   0x2035             MOVS     R0,#+53
   \   00000472   0x....             LDR.N    R1,??DataTable5_18
   \   00000474   0x7008             STRB     R0,[R1, #+0]
    538                  u8clockdown[0]='1';
   \   00000476   0x2031             MOVS     R0,#+49
   \   00000478   0x....             LDR.N    R1,??DataTable5_21
   \   0000047A   0x7008             STRB     R0,[R1, #+0]
    539                  u8clockdown[1]='0';
   \   0000047C   0x2030             MOVS     R0,#+48
   \   0000047E   0x....             LDR.N    R1,??DataTable5_21
   \   00000480   0x7048             STRB     R0,[R1, #+1]
    540                  FlagForGame =0;
                                     ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000482   0x2000             MOVS     R0,#+0
   \   00000484   0x....             LDR.N    R1,??DataTable5_13
   \   00000486   0x7008             STRB     R0,[R1, #+0]
    541                  u8count=0;
   \   00000488   0x2000             MOVS     R0,#+0
   \   0000048A   0x....             LDR.N    R1,??DataTable5_16
   \   0000048C   0x7008             STRB     R0,[R1, #+0]
    542                  u8CountForBit = 0;
   \   0000048E   0x2000             MOVS     R0,#+0
   \   00000490   0x....             LDR.N    R1,??DataTable5_24
   \   00000492   0x7008             STRB     R0,[R1, #+0]
    543                  FlagW = 0;
                               ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000494   0x2000             MOVS     R0,#+0
   \   00000496   0x....             LDR.N    R1,??DataTable5_30
   \   00000498   0x7008             STRB     R0,[R1, #+0]
    544                  FlagL = 0;
                               ^
Warning[Pe188]: enumerated type mixed with another type
   \   0000049A   0x2000             MOVS     R0,#+0
   \   0000049C   0x....             LDR.N    R1,??DataTable5_32
   \   0000049E   0x7008             STRB     R0,[R1, #+0]
    545                  flagsend = 0;
                                  ^
Warning[Pe188]: enumerated type mixed with another type
   \   000004A0   0x2000             MOVS     R0,#+0
   \   000004A2   0x....             LDR.N    R1,??DataTable5_36
   \   000004A4   0x7008             STRB     R0,[R1, #+0]
    546                  PWMAudioOff(BUZZER1);
   \   000004A6   0x2001             MOVS     R0,#+1
   \   000004A8   0x.... 0x....      BL       PWMAudioOff
    547                  LedOff(WHITE);
   \   000004AC   0x2000             MOVS     R0,#+0
   \   000004AE   0x.... 0x....      BL       LedOff
    548                  LedOff(PURPLE);
   \   000004B2   0x2001             MOVS     R0,#+1
   \   000004B4   0x.... 0x....      BL       LedOff
    549                  LedOff(BLUE);
   \   000004B8   0x2002             MOVS     R0,#+2
   \   000004BA   0x.... 0x....      BL       LedOff
    550                  LedOff(CYAN);
   \   000004BE   0x2003             MOVS     R0,#+3
   \   000004C0   0x.... 0x....      BL       LedOff
    551                  LedOff(GREEN);
   \   000004C4   0x2004             MOVS     R0,#+4
   \   000004C6   0x.... 0x....      BL       LedOff
    552                  LedOff(YELLOW);
   \   000004CA   0x2005             MOVS     R0,#+5
   \   000004CC   0x.... 0x....      BL       LedOff
    553                  LedOff(ORANGE);
   \   000004D0   0x2006             MOVS     R0,#+6
   \   000004D2   0x.... 0x....      BL       LedOff
    554                  LedOff(RED);
   \   000004D6   0x2007             MOVS     R0,#+7
   \   000004D8   0x.... 0x....      BL       LedOff
    555                  LCDMessage(LINE1_START_ADDR, "Wait for a player..");
   \   000004DC   0x....             LDR.N    R1,??DataTable5_37
   \   000004DE   0x2000             MOVS     R0,#+0
   \   000004E0   0x.... 0x....      BL       LCDMessage
    556                  /*AntCloseChannel();
    557                  LedOff(BLUE);
    558                  LedOn(YELLOW);*/
    559                  AntOpenChannel();
   \   000004E4   0x.... 0x....      BL       AntOpenChannel
    560                  
    561                  u8LastState = EVENT_RX_FAIL_GO_TO_SEARCH;
   \   000004E8   0x2008             MOVS     R0,#+8
   \   000004EA   0x....             LDR.N    R1,??DataTable5_38
   \   000004EC   0x7008             STRB     R0,[R1, #+0]
    562                }
    563              if(FlagW == 1)
   \                     ??UserAppSM_Idle_28: (+1)
   \   000004EE   0x....             LDR.N    R0,??DataTable5_30
   \   000004F0   0x7800             LDRB     R0,[R0, #+0]
   \   000004F2   0x2801             CMP      R0,#+1
   \   000004F4   0xD103             BNE.N    ??UserAppSM_Idle_29
    564              {
    565                WinnerMusic();
   \   000004F6   0x.... 0x....      BL       WinnerMusic
    566                LedFlash();
   \   000004FA   0x.... 0x....      BL       LedFlash
    567              }
    568              if(FlagL == 1)
   \                     ??UserAppSM_Idle_29: (+1)
   \   000004FE   0x....             LDR.N    R0,??DataTable5_32
   \   00000500   0x7800             LDRB     R0,[R0, #+0]
   \   00000502   0x2801             CMP      R0,#+1
   \   00000504   0xD103             BNE.N    ??UserAppSM_Idle_0
    569              {
    570                LoserMusic();
   \   00000506   0x.... 0x....      BL       LoserMusic
    571                LedFlash();
   \   0000050A   0x.... 0x....      BL       LedFlash
    572              }
    573            
    574            }
    575          
    576            
    577            //ANT Part
    578            //Get the count and send it to another Machine when the count has changed
    579            au8SendNumber[0] = u8CountForBit;
   \                     ??UserAppSM_Idle_0: (+1)
   \   0000050E   0x....             LDR.N    R0,??DataTable5_24
   \   00000510   0x7800             LDRB     R0,[R0, #+0]
   \   00000512   0x....             LDR.N    R1,??DataTable5_39
   \   00000514   0x7008             STRB     R0,[R1, #+0]
    580            if(au8SendNumber[0] != au8SendNumber[1])
   \   00000516   0x....             LDR.N    R0,??DataTable5_39
   \   00000518   0x7800             LDRB     R0,[R0, #+0]
   \   0000051A   0x....             LDR.N    R1,??DataTable5_39
   \   0000051C   0x7849             LDRB     R1,[R1, #+1]
   \   0000051E   0x4288             CMP      R0,R1
   \   00000520   0xD002             BEQ.N    ??UserAppSM_Idle_30
    581            {
    582              AntQueueBroadcastMessage (au8SendNumber);
   \   00000522   0x....             LDR.N    R0,??DataTable5_39
   \   00000524   0x.... 0x....      BL       AntQueueBroadcastMessage
    583            }
    584            au8SendNumber[1] = u8CountForBit;
   \                     ??UserAppSM_Idle_30: (+1)
   \   00000528   0x....             LDR.N    R0,??DataTable5_24
   \   0000052A   0x7800             LDRB     R0,[R0, #+0]
   \   0000052C   0x....             LDR.N    R1,??DataTable5_39
   \   0000052E   0x7048             STRB     R0,[R1, #+1]
    585            /* Queue open channel and change LED0 from yellow to blinking green to indicate channel is opening */
    586            /*if(WasButtonPressed(BUTTON0)&&Flag_Button0 == 0)
    587            {
    588              ButtonAcknowledge(BUTTON0);
    589              Flag_Button0 = 1;
    590              
    591              AntOpenChannel();
    592              LedOff(YELLOW);
    593              LCDClearChars(LINE2_START_ADDR, 20);
    594              
    595            }*/
    596            LedOff(YELLOW);
   \   00000530   0x2005             MOVS     R0,#+5
   \   00000532   0x.... 0x....      BL       LedOff
    597            /* Always check for ANT messages */
    598            if( AntReadData() )
   \   00000536   0x.... 0x....      BL       AntReadData
   \   0000053A   0x2800             CMP      R0,#+0
   \   0000053C   0xD06F             BEQ.N    ??UserAppSM_Idle_31
    599            {
    600               /* New data message: check what it is */
    601              if(G_eAntApiCurrentMessageClass == ANT_DATA)
   \   0000053E   0x....             LDR.N    R0,??DataTable5_40
   \   00000540   0x7800             LDRB     R0,[R0, #+0]
   \   00000542   0x2801             CMP      R0,#+1
   \   00000544   0xD122             BNE.N    ??UserAppSM_Idle_32
    602              {
    603                /* We got some data: parse it into au8DataContent */
    604                for(u8 i = 0; i < ANT_DATA_BYTES; i++)
   \   00000546   0x2400             MOVS     R4,#+0
   \                     ??UserAppSM_Idle_33: (+1)
   \   00000548   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000054A   0x2C08             CMP      R4,#+8
   \   0000054C   0xDA67             BGE.N    ??UserAppSM_Idle_31
    605                {
    606                  au8Receive[2 * i]     = HexToASCIICharUpper(G_au8AntApiCurrentData[i] / 16);
   \   0000054E   0x....             LDR.N    R0,??DataTable5_41
   \   00000550   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000552   0x5C20             LDRB     R0,[R4, R0]
   \   00000554   0x2110             MOVS     R1,#+16
   \   00000556   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000055A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000055C   0x.... 0x....      BL       HexToASCIICharUpper
   \   00000560   0x....             LDR.N    R1,??DataTable5_28
   \   00000562   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000564   0xF801 0x0014      STRB     R0,[R1, R4, LSL #+1]
    607                  au8Receive[2 * i + 1] = HexToASCIICharUpper(G_au8AntApiCurrentData[i] % 16);
   \   00000568   0x....             LDR.N    R0,??DataTable5_41
   \   0000056A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000056C   0x5C21             LDRB     R1,[R4, R0]
   \   0000056E   0x2210             MOVS     R2,#+16
   \   00000570   0xFB91 0xF0F2      SDIV     R0,R1,R2
   \   00000574   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   00000578   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000057A   0x.... 0x....      BL       HexToASCIICharUpper
   \   0000057E   0x....             LDR.N    R1,??DataTable5_28
   \   00000580   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000582   0xEB11 0x0144      ADDS     R1,R1,R4, LSL #+1
   \   00000586   0x7048             STRB     R0,[R1, #+1]
    608                }
   \   00000588   0x1C64             ADDS     R4,R4,#+1
   \   0000058A   0xE7DD             B.N      ??UserAppSM_Idle_33
    609              } /* end if(G_eAntApiCurrentMessageClass == ANT_DATA) */
    610          
    611              else if(G_eAntApiCurrentMessageClass == ANT_TICK)
   \                     ??UserAppSM_Idle_32: (+1)
   \   0000058C   0x....             LDR.N    R0,??DataTable5_40
   \   0000058E   0x7800             LDRB     R0,[R0, #+0]
   \   00000590   0x2802             CMP      R0,#+2
   \   00000592   0xD144             BNE.N    ??UserAppSM_Idle_31
    612              {
    613                /* Look at the TICK contents to check the event code and respond only if it's different */
    614                if(u8LastState != G_au8AntApiCurrentData[ANT_TICK_MSG_EVENT_CODE_INDEX])
   \   00000594   0x....             LDR.N    R0,??DataTable5_38
   \   00000596   0x7800             LDRB     R0,[R0, #+0]
   \   00000598   0x....             LDR.N    R1,??DataTable5_41
   \   0000059A   0x7849             LDRB     R1,[R1, #+1]
   \   0000059C   0x4288             CMP      R0,R1
   \   0000059E   0xD03E             BEQ.N    ??UserAppSM_Idle_31
    615                {
    616                  /* The state changed so update u8LastState and queue a debug message */
    617                  u8LastState = G_au8AntApiCurrentData[ANT_TICK_MSG_EVENT_CODE_INDEX];
   \   000005A0   0x....             LDR.N    R0,??DataTable5_41
   \   000005A2   0x7840             LDRB     R0,[R0, #+1]
   \   000005A4   0x....             LDR.N    R1,??DataTable5_38
   \   000005A6   0x7008             STRB     R0,[R1, #+0]
    618          
    619                  /* Parse u8LastState to update LED status */
    620                  switch (u8LastState)
   \   000005A8   0x....             LDR.N    R0,??DataTable5_38
   \   000005AA   0x7800             LDRB     R0,[R0, #+0]
   \   000005AC   0x2800             CMP      R0,#+0
   \   000005AE   0xD006             BEQ.N    ??UserAppSM_Idle_34
   \   000005B0   0x2801             CMP      R0,#+1
   \   000005B2   0xD02D             BEQ.N    ??UserAppSM_Idle_35
   \   000005B4   0x2802             CMP      R0,#+2
   \   000005B6   0xD01C             BEQ.N    ??UserAppSM_Idle_36
   \   000005B8   0x2808             CMP      R0,#+8
   \   000005BA   0xD022             BEQ.N    ??UserAppSM_Idle_37
   \   000005BC   0xE02C             B.N      ??UserAppSM_Idle_38
    621                  {
    622                    /* If we are synced with a device, blue is solid */
    623                    case RESPONSE_NO_ERROR:
    624                    {
    625                      LedOff(GREEN);
   \                     ??UserAppSM_Idle_34: (+1)
   \   000005BE   0x2004             MOVS     R0,#+4
   \   000005C0   0x.... 0x....      BL       LedOff
    626                      LedOn(BLUE);
   \   000005C4   0x2002             MOVS     R0,#+2
   \   000005C6   0x.... 0x....      BL       LedOn
    627                      FlagForGame =1;
                                         ^
Warning[Pe188]: enumerated type mixed with another type
   \   000005CA   0x2001             MOVS     R0,#+1
   \   000005CC   0x....             LDR.N    R1,??DataTable5_13
   \   000005CE   0x7008             STRB     R0,[R1, #+0]
    628                      if(flagsend == 0)
   \   000005D0   0x....             LDR.N    R0,??DataTable5_36
   \   000005D2   0x7800             LDRB     R0,[R0, #+0]
   \   000005D4   0x2800             CMP      R0,#+0
   \   000005D6   0xD10B             BNE.N    ??UserAppSM_Idle_39
    629                      {
    630                        flagsend = 1;
                                        ^
Warning[Pe188]: enumerated type mixed with another type

    static bool Flag_Button0 = 0;
                ^
"C:\Users\DK\Desktop\Razor_Atmel-slave\Razor_Atmel-master\firmware_mpg_common\application\user_app.c",305  Warning[Pe177]: 
          variable "Flag_Button0" was declared but never referenced

    static bool Flag_Button1 = 0;
                ^
"C:\Users\DK\Desktop\Razor_Atmel-slave\Razor_Atmel-master\firmware_mpg_common\application\user_app.c",306  Warning[Pe177]: 
          variable "Flag_Button1" was declared but never referenced

    u8 u8return[]= {1,35,69,103,137,171,205,239};
       ^
"C:\Users\DK\Desktop\Razor_Atmel-slave\Razor_Atmel-master\firmware_mpg_common\application\user_app.c",308  Warning[Pe177]: 
          variable "u8return" was declared but never referenced
   \   000005D8   0x2001             MOVS     R0,#+1
   \   000005DA   0x....             LDR.N    R1,??DataTable5_36
   \   000005DC   0x7008             STRB     R0,[R1, #+0]
    631                        u8 u8return[]= {0,35,69,103,137,171,205,239};
   \   000005DE   0xA801             ADD      R0,SP,#+4
   \   000005E0   0x....             LDR.N    R1,??DataTable5_42
   \   000005E2   0xC90C             LDM      R1!,{R2,R3}
   \   000005E4   0xC00C             STM      R0!,{R2,R3}
   \   000005E6   0x3908             SUBS     R1,R1,#+8
   \   000005E8   0x3808             SUBS     R0,R0,#+8
    632                        AntQueueBroadcastMessage(u8return);
   \   000005EA   0xA801             ADD      R0,SP,#+4
   \   000005EC   0x.... 0x....      BL       AntQueueBroadcastMessage
    633                      }
    634                      break;
   \                     ??UserAppSM_Idle_39: (+1)
   \   000005F0   0xE015             B.N      ??UserAppSM_Idle_31
    635                    }
    636          
    637                    /* If we are paired but missing messages, blue blinks */
    638                    case EVENT_RX_FAIL:
    639                    {
    640                      LedOff(GREEN);
   \                     ??UserAppSM_Idle_36: (+1)
   \   000005F2   0x2004             MOVS     R0,#+4
   \   000005F4   0x.... 0x....      BL       LedOff
    641                      LedBlink(BLUE, LED_2HZ);
   \   000005F8   0x21FA             MOVS     R1,#+250
   \   000005FA   0x2002             MOVS     R0,#+2
   \   000005FC   0x.... 0x....      BL       LedBlink
    642                      break;
   \   00000600   0xE00D             B.N      ??UserAppSM_Idle_31
    643                    }
    644          
    645                    /* If we drop to search, LED is green */
    646                    case EVENT_RX_FAIL_GO_TO_SEARCH:
    647                    {
    648                      LedOff(BLUE);
   \                     ??UserAppSM_Idle_37: (+1)
   \   00000602   0x2002             MOVS     R0,#+2
   \   00000604   0x.... 0x....      BL       LedOff
    649                      LedOn(GREEN);
   \   00000608   0x2004             MOVS     R0,#+4
   \   0000060A   0x.... 0x....      BL       LedOn
    650                      break;
   \   0000060E   0xE006             B.N      ??UserAppSM_Idle_31
    651                    }
    652          
    653                    /* If the search times out, the channel should automatically close */
    654                    case EVENT_RX_SEARCH_TIMEOUT:
    655                    {
    656                      DebugPrintf("Search timeout\r\n");
   \                     ??UserAppSM_Idle_35: (+1)
   \   00000610   0x....             LDR.N    R0,??DataTable5_43
   \   00000612   0x.... 0x....      BL       DebugPrintf
    657                      break;
   \   00000616   0xE002             B.N      ??UserAppSM_Idle_31
    658                    }
    659          
    660                    default:
    661                    {
    662                      DebugPrintf("Unexpected Event\r\n");
   \                     ??UserAppSM_Idle_38: (+1)
   \   00000618   0x....             LDR.N    R0,??DataTable5_44
   \   0000061A   0x.... 0x....      BL       DebugPrintf
    663                      break;
    664                    }
    665                  } /* end switch (G_au8AntApiCurrentData) */
    666                } /* end if (u8LastState ...) */
    667              } /* end else if(G_eAntApiCurrentMessageClass == ANT_TICK) */
    668            } /* end AntReadData() */
    669          
    670             
    671            
    672            
    673            
    674             
    675          } /* end UserAppSM_Idle() */
   \                     ??UserAppSM_Idle_31: (+1)
   \   0000061E   0xB006             ADD      SP,SP,#+24
   \   00000620   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .data, align 4
   \                     ??u8NextMole:
   \   00000000   0x00 0x06          DC8 0, 6, 13, 19, 19, 13, 6, 0, 13, 19, 6, 0, 13, 13, 13, 19, 19, 0, 0
   \              0x0D 0x13    
   \              0x13 0x0D    
   \              0x06 0x00    
   \              0x0D 0x13    
   \              0x06 0x00    
   \              0x0D 0x0D    
   \              0x0D 0x13    
   \              0x13 0x00    
   \              0x00         
   \   00000013   0x06 0x13          DC8 6, 19, 13, 0, 6, 19, 13, 19, 19, 19, 19, 13, 13, 0, 13, 19, 19, 0
   \              0x0D 0x00    
   \              0x06 0x13    
   \              0x0D 0x13    
   \              0x13 0x13    
   \              0x13 0x0D    
   \              0x0D 0x00    
   \              0x0D 0x13    
   \              0x13 0x00    
   \   00000025   0x00 0x06          DC8 0, 6, 6, 6, 0, 0, 6, 6, 0, 6, 13, 19, 6, 0, 0, 6, 13, 13, 13, 19, 6
   \              0x06 0x06    
   \              0x00 0x00    
   \              0x06 0x06    
   \              0x00 0x06    
   \              0x0D 0x13    
   \              0x06 0x00    
   \              0x00 0x06    
   \              0x0D 0x0D    
   \              0x0D 0x13    
   \              0x06         
   \   0000003A   0x00 0x13          DC8 0, 19, 13, 13, 6, 6, 13, 13, 0, 0
   \              0x0D 0x0D    
   \              0x06 0x06    
   \              0x0D 0x0D    
   \              0x00 0x00    

   \                                 In section .data, align 4
   \                     ??u8PointToNextMole:
   \   00000000   0x........         DC32 ??u8NextMole

   \                                 In section .bss, align 1
   \                     ??u8CountForBit:
   \   00000000                      DS8 1

   \                                 In section .data, align 2
   \                     ??u8ClockDownForBegin:
   \   00000000   0x35 0x00          DC8 "5"

   \                                 In section .bss, align 4
   \                     ??u32ClockDownForGame:
   \   00000000                      DS8 4

   \                                 In section .bss, align 2
   \                     ??u16ClockDownForBeginning:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     ??u8count:
   \   00000000                      DS8 1

   \                                 In section .data, align 4
   \                     ??u8clockdown:
   \   00000000   0x31 0x30          DC8 "10"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .bss, align 1
   \                     ??flag_1:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??FlagForGame:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     ??u8tempfordisplay:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
   \                     ??FlagW:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??FlagL:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??flagsend:
   \   00000000                      DS8 1

   \                                 In section .data, align 4
   \                     ??au8SendNumber:
   \   00000000   0x41 0x61          DC8 65, 97, 0, 0, 165, 0, 0, 0
   \              0x00 0x00    
   \              0xA5 0x00    
   \              0x00 0x00    

   \                                 In section .data, align 4
   \                     ??au8Receive:
   \   00000000   0x78 0x78          DC8 "xxxxxxxxxxxxxxxx"
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .data, align 1
   \                     ??u8LastState:
   \   00000000   0xFF               DC8 255
    676               
    677          
    678          /*-------------------------------------------------------------------------------------------------------------------*/
    679          /* Handle an error */

   \                                 In section .text, align 4, keep-with-next
    680          static void UserAppSM_Error(void)          
    681          {
    682            
    683          } /* end UserAppSM_Error() */
   \                     UserAppSM_Error: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     G_stAntSetupData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     UserApp_StateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     ??u16counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     ??u16buzzerrate

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     ??u8notecounter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     ??u16counter_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     ??u16buzzerrate_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     ??u8notecounter_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     ??u16Count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     ??flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x........         DC32     ??FlagForGame

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   0x........         DC32     ??u16ClockDownForBeginning

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_15:
   \   00000000   0x........         DC32     ??u32ClockDownForGame

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_16:
   \   00000000   0x........         DC32     ??u8count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_17:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_18:
   \   00000000   0x........         DC32     ??u8ClockDownForBegin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_19:
   \   00000000   0x........         DC32     ??flag_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_20:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_21:
   \   00000000   0x........         DC32     ??u8clockdown

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_22:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_23:
   \   00000000   0x........         DC32     ??u8PointToNextMole

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_24:
   \   00000000   0x........         DC32     ??u8CountForBit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_25:
   \   00000000   0x........         DC32     ??u8tempfordisplay

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_26:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_27:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_28:
   \   00000000   0x........         DC32     ??au8Receive

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_29:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_30:
   \   00000000   0x........         DC32     ??FlagW

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_31:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_32:
   \   00000000   0x........         DC32     ??FlagL

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_33:
   \   00000000   0x........         DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_34:
   \   00000000   0x........         DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_35:
   \   00000000   0x........         DC32     ??u8NextMole

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_36:
   \   00000000   0x........         DC32     ??flagsend

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_37:
   \   00000000   0x........         DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_38:
   \   00000000   0x........         DC32     ??u8LastState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_39:
   \   00000000   0x........         DC32     ??au8SendNumber

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_40:
   \   00000000   0x........         DC32     G_eAntApiCurrentMessageClass

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_41:
   \   00000000   0x........         DC32     G_au8AntApiCurrentData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_42:
   \   00000000   0x........         DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_43:
   \   00000000   0x........         DC32     ?_15

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_44:
   \   00000000   0x........         DC32     ?_16

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x42 0x65          DC8 "Beat Mole !"
   \              0x61 0x74    
   \              0x20 0x4D    
   \              0x6F 0x6C    
   \              0x65 0x20    
   \              0x21 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x50 0x6C          DC8 "Player2"
   \              0x61 0x79    
   \              0x65 0x72    
   \              0x32 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x01 0x23          DC8 1, 35, 69, 103, 137, 171, 205, 239
   \              0x45 0x67    
   \              0x89 0xAB    
   \              0xCD 0xEF    

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x43 0x6C          DC8 "Clock Down:  s"
   \              0x6F 0x63    
   \              0x6B 0x20    
   \              0x44 0x6F    
   \              0x77 0x6E    
   \              0x3A 0x20    
   \              0x20 0x73    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x50 0x6C          DC8 "Player2 T:"
   \              0x61 0x79    
   \              0x65 0x72    
   \              0x32 0x20    
   \              0x54 0x3A    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 2
   \                     ?_5:
   \   00000000   0x4D 0x00          DC8 77, 0

   \                                 In section .rodata, align 2
   \   00000000   0x4D 0x00          DC8 "M"

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x4E 0x75          DC8 "Num:"
   \              0x6D 0x3A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x54 0x49          DC8 "TIME OUT!"
   \              0x4D 0x45    
   \              0x20 0x4F    
   \              0x55 0x54    
   \              0x21 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x59 0x6F          DC8 "You are the winner !"
   \              0x75 0x20    
   \              0x61 0x72    
   \              0x65 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x77 0x69    
   \              0x6E 0x6E    
   \              0x65 0x72    
   \              0x20 0x21    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x59 0x6F          DC8 "You are the loser ! "
   \              0x75 0x20    
   \              0x61 0x72    
   \              0x65 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x6C 0x6F    
   \              0x73 0x65    
   \              0x72 0x20    
   \              0x21 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x44 0x72          DC8 "Draw!               "
   \              0x61 0x77    
   \              0x21 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x54 0x72          DC8 "Try again by B0      "
   \              0x79 0x20    
   \              0x61 0x67    
   \              0x61 0x69    
   \              0x6E 0x20    
   \              0x62 0x79    
   \              0x20 0x42    
   \              0x30 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x57 0x61          DC8 "Wait for a player.."
   \              0x69 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x61    
   \              0x20 0x70    
   \              0x6C 0x61    
   \              0x79 0x65    
   \              0x72 0x2E    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x00 0x23          DC8 0, 35, 69, 103, 137, 171, 205, 239
   \              0x45 0x67    
   \              0x89 0xAB    
   \              0xCD 0xEF    

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x53 0x65          DC8 "Search timeout\015\012"
   \              0x61 0x72    
   \              0x63 0x68    
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x6F    
   \              0x75 0x74    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_16:
   \   00000000   0x55 0x6E          DC8 "Unexpected Event\015\012"
   \              0x65 0x78    
   \              0x70 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x20 0x45    
   \              0x76 0x65    
   \              0x6E 0x74    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0
    684          
    685          
    686          /*-------------------------------------------------------------------------------------------------------------------*/
    687          /* State to sit in if init failed */
    688          static void UserAppSM_FailedInit(void)          
                             ^
Warning[Pe177]: function "UserAppSM_FailedInit" was declared but never
          referenced

  static u32 UserApp_u32Timeout;                      /* Timeout counter used across states */
             ^
"C:\Users\DK\Desktop\Razor_Atmel-slave\Razor_Atmel-master\firmware_mpg_common\application\user_app.c",66  Warning[Pe177]: 
          variable "UserApp_u32Timeout" was declared but never referenced

  static u32 UserApp_u32DataMsgCount = 0;   /* ANT_DATA packets received */
             ^
"C:\Users\DK\Desktop\Razor_Atmel-slave\Razor_Atmel-master\firmware_mpg_common\application\user_app.c",68  Warning[Pe177]: 
          variable "UserApp_u32DataMsgCount" was declared but never referenced

  static u32 UserApp_u32TickMsgCount = 0;   /* ANT_TICK packets received */
             ^
"C:\Users\DK\Desktop\Razor_Atmel-slave\Razor_Atmel-master\firmware_mpg_common\application\user_app.c",69  Warning[Pe177]: 
          variable "UserApp_u32TickMsgCount" was declared but never referenced
    689          {
    690              
    691          } /* end UserAppSM_FailedInit() */
    692          
    693          
    694          /*--------------------------------------------------------------------------------------------------------------------*/
    695          /* End of File                                                                                                        */
    696          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   LedFlash
         8   -> LedOff
         8   -> LedOn
       8   LoserMusic
         8   -> PWMAudioOn
         8   -> PWMAudioSetFrequency
       8   UserAppInitialize
         8   -> AntChannelConfig
         8   -> AntOpenChannel
         8   -> LCDCommand
         8   -> LCDMessage
         8   -> LedBlink
         8   -> LedOff
         8   -> LedOn
       8   UserAppRunActiveState
         8   -- Indirect call
       0   UserAppSM_Error
      32   UserAppSM_Idle
        32   -> AntOpenChannel
        32   -> AntQueueBroadcastMessage
        32   -> AntReadData
        32   -> ButtonAcknowledge
        32   -> DebugPrintf
        32   -> HexToASCIICharUpper
        32   -> LCDClearChars
        32   -> LCDCommand
        32   -> LCDMessage
        32   -> LedBlink
        32   -> LedFlash
        32   -> LedOff
        32   -> LedOn
        32   -> LoserMusic
        32   -> NumberToAscii
        32   -> PWMAudioOff
        32   -> WasButtonPressed
        32   -> WinnerMusic
       8   WinnerMusic
         8   -> PWMAudioOn
         8   -> PWMAudioSetFrequency


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_16
       4  ??DataTable5_17
       4  ??DataTable5_18
       4  ??DataTable5_19
       4  ??DataTable5_2
       4  ??DataTable5_20
       4  ??DataTable5_21
       4  ??DataTable5_22
       4  ??DataTable5_23
       4  ??DataTable5_24
       4  ??DataTable5_25
       4  ??DataTable5_26
       4  ??DataTable5_27
       4  ??DataTable5_28
       4  ??DataTable5_29
       4  ??DataTable5_3
       4  ??DataTable5_30
       4  ??DataTable5_31
       4  ??DataTable5_32
       4  ??DataTable5_33
       4  ??DataTable5_34
       4  ??DataTable5_35
       4  ??DataTable5_36
       4  ??DataTable5_37
       4  ??DataTable5_38
       4  ??DataTable5_39
       4  ??DataTable5_4
       4  ??DataTable5_40
       4  ??DataTable5_41
       4  ??DataTable5_42
       4  ??DataTable5_43
       4  ??DataTable5_44
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      12  ?_0
       8  ?_1
      24  ?_10
      24  ?_11
      24  ?_12
      20  ?_13
       8  ?_14
      20  ?_15
      20  ?_16
       8  ?_2
      16  ?_3
      12  ?_4
       2  ?_5
       2  ?_6
       8  ?_7
      12  ?_8
      24  ?_9
       1  FlagForGame
       1  FlagL
       1  FlagW
       4  G_u32UserAppFlags
     232  LedFlash
      94  LoserMusic
     164  UserAppInitialize
      12  UserAppRunActiveState
       2  UserAppSM_Error
    1570  UserAppSM_Idle
       4  UserApp_StateMachine
      94  WinnerMusic
      20  au8Receive
       8  au8SendNumber
       1  flag
       1  flag
       1  flagsend
       2  u16ClockDownForBeginning
       2  u16Count
     112  u16buzzerrate
     384  u16buzzerrate
       2  u16counter
       2  u16counter
       4  u32ClockDownForGame
       2  u8ClockDownForBegin
       1  u8CountForBit
       1  u8LastState
      68  u8NextMole
       4  u8PointToNextMole
       4  u8clockdown
       1  u8count
       1  u8notecounter
       1  u8notecounter
       4  u8tempfordisplay

 
    34 bytes in section .bss
   603 bytes in section .data
   244 bytes in section .rodata
 2 348 bytes in section .text
 
 2 348 bytes of CODE  memory
   244 bytes of CONST memory
   637 bytes of DATA  memory

Errors: none
Warnings: 29
